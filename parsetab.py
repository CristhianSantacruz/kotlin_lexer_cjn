
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQUALSNOT_EQUALSleftLESSGREATERLESS_EQUALGREATER_EQUALleftPLUSMINUSleftMULTIPLYDIVIDErightUMINUSABSTRACT AND ARRAYOF ARROW ASSIGN BOOLEAN_FALSE BOOLEAN_TRUE BREAK CATCH CLASS COLON COMMA COMPANION CONSTRUCTOR CONTAINS CONTINUE CROSSINLINE DATA DIVIDE DOT ELSE ELVIS ENUM EQUALS EXTENDS FILTER FINAL FINALLY FOR FUN GREATER GREATER_EQUAL ID IF IMPLEMENTS IN INDICES INIT INLINE INNER INTERFACE INTERNAL LATEINIT LBRACE LBRACKET LESS LESS_EQUAL LISTOF LPAREN MAPOF MINUS MODULO MULTIPLY NOINLINE NOT_EQUALS NULL NUMBER_DOUBLE NUMBER_INT OBJECT OPEN OR OUT OVERRIDE PLUS PRINT PRINTLN PRIVATE PROTECTED PUBLIC QUESTION RANGE RBRACE RBRACKET READLINE REIFIED RETURN RPAREN SEALED SEMICOLON STRING SUM SUPER THIS TO TRY TYPE_BOOLEAN TYPE_DOUBLE TYPE_INT TYPE_STRING VAL VAR WHEN WHILEprogram : statement_liststatement_list : statement_list statementstatement_list : statementstatement_list : statement : declaration\n                 | function_def\n                 | class_def\n                 | for_loop\n                 | when_stmt\n                 | print_stmt\n                 | return_stmt\n                 | break_stmt\n                 | continue_stmt\n                 | if_else\n                 | expression_stmtexpression : NULLdeclaration : VAR ID ASSIGN expression\n                   | VAL ID ASSIGN expression\n                   | VAR ID COLON type ASSIGN expression\n                   | VAL ID COLON type ASSIGN expressionparam_list_opt : param_list\n                      | param_list : param_list COMMA param\n                  | paramparam : ID COLON typetype : TYPE_INT\n            | TYPE_DOUBLE\n            | TYPE_BOOLEAN\n            | TYPE_STRING\n            | ID\n            | ID LESS ID GREATER\n            | ID LESS ID COMMA ID GREATERreturn_stmt : RETURN expressionfor_loop : FOR LPAREN ID IN expression RPAREN loop_bodyloop_body : block\n                 | statementexpression : MAPOF LPAREN map_entries RPARENmap_entries : map_entries COMMA map_entrymap_entries : map_entrymap_entry : expression TO expressionexpression : ID LPAREN expression_list RPARENexpression : expression LBRACKET expression RBRACKETexpression : expression DOT IDexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression MULTIPLY expression\n                  | expression DIVIDE expression\n                  | expression LESS expression\n                  | expression GREATER expression\n                  | expression LESS_EQUAL expression\n                  | expression GREATER_EQUAL expression\n                  | expression EQUALS expression\n                  | expression NOT_EQUALS expression\n                  | expression AND expression\n                  | expression OR expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBER_INT\n                  | NUMBER_DOUBLE\n                  | STRING\n                  | BOOLEAN_TRUE\n                  | BOOLEAN_FALSEexpression : IDprint_stmt : PRINTLN LPAREN expression RPARENprint_stmt : PRINT LPAREN expression RPARENblock : LBRACE statement_list RBRACEexpression_stmt : expressionexpression : ID ASSIGN expressionexpression : LISTOF LPAREN expression_list RPARENexpression_list : expression_list COMMA expressionexpression_list : expressionexpression_list : when_stmt : WHEN LPAREN expression RPAREN LBRACE when_branches RBRACEwhen_branches : when_branches when_branchwhen_branches : when_branchwhen_branch : expression ARROW statement_listwhen_branch : ELSE ARROW statement_listwhen_stmt : WHEN LBRACE when_branches RBRACEwhen_branch : expression blockwhen_branch : ELSE blockclass_def : CLASS ID LBRACE class_body RBRACEclass_body : class_body class_memberclass_body : class_memberclass_body : class_member : property_def\n                    | method_defproperty_def : VAR ID COLON type\n                    | VAL ID COLON type\n                    | VAR ID COLON type ASSIGN expression\n                    | VAL ID COLON type ASSIGN expressionmethod_def : FUN ID LPAREN param_list_opt RPAREN blockfunction_def : FUN ID LPAREN param_list_opt RPAREN COLON type block\n                    | FUN ID LPAREN param_list_opt RPAREN blockbreak_stmt : BREAKcontinue_stmt : CONTINUEexpression : ARRAYOF LPAREN expression_list RPARENif_else : IF LPAREN expression RPAREN block ELSE blockif_else : IF LPAREN expression RPAREN blockexpression : READLINE LPAREN RPAREN'
    
_lr_action_items = {'VAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,30,33,34,35,36,37,41,68,71,79,81,82,83,84,85,86,87,88,89,90,91,92,93,97,98,113,114,115,117,118,119,120,121,123,124,130,131,132,133,139,141,143,144,146,147,149,152,153,161,162,168,169,170,171,175,176,179,184,186,188,191,192,194,195,196,197,198,200,204,205,206,207,],[15,15,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-63,-67,-94,-95,-16,-58,-59,-60,-61,-62,-2,-33,-56,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,134,-99,-17,-30,-26,-27,-28,-29,-41,-42,-18,134,-83,-85,-86,-78,15,15,15,-64,-65,-37,-69,-96,-81,-82,15,15,15,-98,-19,-20,-93,15,-66,-31,-87,-88,-34,-35,-36,-73,-97,-92,-32,-89,-90,-91,]),'VAL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,30,33,34,35,36,37,41,68,71,79,81,82,83,84,85,86,87,88,89,90,91,92,93,97,98,113,114,115,117,118,119,120,121,123,124,130,131,132,133,139,141,143,144,146,147,149,152,153,161,162,168,169,170,171,175,176,179,184,186,188,191,192,194,195,196,197,198,200,204,205,206,207,],[18,18,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-63,-67,-94,-95,-16,-58,-59,-60,-61,-62,-2,-33,-56,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,135,-99,-17,-30,-26,-27,-28,-29,-41,-42,-18,135,-83,-85,-86,-78,18,18,18,-64,-65,-37,-69,-96,-81,-82,18,18,18,-98,-19,-20,-93,18,-66,-31,-87,-88,-34,-35,-36,-73,-97,-92,-32,-89,-90,-91,]),'FUN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,30,33,34,35,36,37,41,68,71,79,81,82,83,84,85,86,87,88,89,90,91,92,93,97,98,113,114,115,117,118,119,120,121,123,124,130,131,132,133,139,141,143,144,146,147,149,152,153,161,162,168,169,170,171,175,176,179,184,186,188,191,192,194,195,196,197,198,200,204,205,206,207,],[19,19,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-63,-67,-94,-95,-16,-58,-59,-60,-61,-62,-2,-33,-56,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,136,-99,-17,-30,-26,-27,-28,-29,-41,-42,-18,136,-83,-85,-86,-78,19,19,19,-64,-65,-37,-69,-96,-81,-82,19,19,19,-98,-19,-20,-93,19,-66,-31,-87,-88,-34,-35,-36,-73,-97,-92,-32,-89,-90,-91,]),'CLASS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,30,33,34,35,36,37,41,68,71,79,81,82,83,84,85,86,87,88,89,90,91,92,93,97,113,114,121,123,124,139,141,143,144,146,147,149,152,153,161,168,169,170,171,175,176,179,184,186,194,195,196,197,198,200,],[21,21,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-63,-67,-94,-95,-16,-58,-59,-60,-61,-62,-2,-33,-56,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,-99,-17,-41,-42,-18,-78,21,21,21,-64,-65,-37,-69,-96,-81,21,21,21,-98,-19,-20,-93,21,-66,-34,-35,-36,-73,-97,-92,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,30,33,34,35,36,37,41,68,71,79,81,82,83,84,85,86,87,88,89,90,91,92,93,97,113,114,121,123,124,139,141,143,144,146,147,149,152,153,161,168,169,170,171,175,176,179,184,186,194,195,196,197,198,200,],[22,22,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-63,-67,-94,-95,-16,-58,-59,-60,-61,-62,-2,-33,-56,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,-99,-17,-41,-42,-18,-78,22,22,22,-64,-65,-37,-69,-96,-81,22,22,22,-98,-19,-20,-93,22,-66,-34,-35,-36,-73,-97,-92,]),'WHEN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,30,33,34,35,36,37,41,68,71,79,81,82,83,84,85,86,87,88,89,90,91,92,93,97,113,114,121,123,124,139,141,143,144,146,147,149,152,153,161,168,169,170,171,175,176,179,184,186,194,195,196,197,198,200,],[23,23,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-63,-67,-94,-95,-16,-58,-59,-60,-61,-62,-2,-33,-56,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,-99,-17,-41,-42,-18,-78,23,23,23,-64,-65,-37,-69,-96,-81,23,23,23,-98,-19,-20,-93,23,-66,-34,-35,-36,-73,-97,-92,]),'PRINTLN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,30,33,34,35,36,37,41,68,71,79,81,82,83,84,85,86,87,88,89,90,91,92,93,97,113,114,121,123,124,139,141,143,144,146,147,149,152,153,161,168,169,170,171,175,176,179,184,186,194,195,196,197,198,200,],[24,24,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-63,-67,-94,-95,-16,-58,-59,-60,-61,-62,-2,-33,-56,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,-99,-17,-41,-42,-18,-78,24,24,24,-64,-65,-37,-69,-96,-81,24,24,24,-98,-19,-20,-93,24,-66,-34,-35,-36,-73,-97,-92,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,30,33,34,35,36,37,41,68,71,79,81,82,83,84,85,86,87,88,89,90,91,92,93,97,113,114,121,123,124,139,141,143,144,146,147,149,152,153,161,168,169,170,171,175,176,179,184,186,194,195,196,197,198,200,],[25,25,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-63,-67,-94,-95,-16,-58,-59,-60,-61,-62,-2,-33,-56,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,-99,-17,-41,-42,-18,-78,25,25,25,-64,-65,-37,-69,-96,-81,25,25,25,-98,-19,-20,-93,25,-66,-34,-35,-36,-73,-97,-92,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,30,33,34,35,36,37,41,68,71,79,81,82,83,84,85,86,87,88,89,90,91,92,93,97,113,114,121,123,124,139,141,143,144,146,147,149,152,153,161,168,169,170,171,175,176,179,184,186,194,195,196,197,198,200,],[26,26,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-63,-67,-94,-95,-16,-58,-59,-60,-61,-62,-2,-33,-56,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,-99,-17,-41,-42,-18,-78,26,26,26,-64,-65,-37,-69,-96,-81,26,26,26,-98,-19,-20,-93,26,-66,-34,-35,-36,-73,-97,-92,]),'BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,30,33,34,35,36,37,41,68,71,79,81,82,83,84,85,86,87,88,89,90,91,92,93,97,113,114,121,123,124,139,141,143,144,146,147,149,152,153,161,168,169,170,171,175,176,179,184,186,194,195,196,197,198,200,],[27,27,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-63,-67,-94,-95,-16,-58,-59,-60,-61,-62,-2,-33,-56,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,-99,-17,-41,-42,-18,-78,27,27,27,-64,-65,-37,-69,-96,-81,27,27,27,-98,-19,-20,-93,27,-66,-34,-35,-36,-73,-97,-92,]),'CONTINUE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,30,33,34,35,36,37,41,68,71,79,81,82,83,84,85,86,87,88,89,90,91,92,93,97,113,114,121,123,124,139,141,143,144,146,147,149,152,153,161,168,169,170,171,175,176,179,184,186,194,195,196,197,198,200,],[28,28,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-63,-67,-94,-95,-16,-58,-59,-60,-61,-62,-2,-33,-56,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,-99,-17,-41,-42,-18,-78,28,28,28,-64,-65,-37,-69,-96,-81,28,28,28,-98,-19,-20,-93,28,-66,-34,-35,-36,-73,-97,-92,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,30,33,34,35,36,37,41,68,71,79,81,82,83,84,85,86,87,88,89,90,91,92,93,97,113,114,121,123,124,139,141,143,144,146,147,149,152,153,161,168,169,170,171,175,176,179,184,186,194,195,196,197,198,200,],[29,29,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-63,-67,-94,-95,-16,-58,-59,-60,-61,-62,-2,-33,-56,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,-99,-17,-41,-42,-18,-78,29,29,29,-64,-65,-37,-69,-96,-81,29,29,29,-98,-19,-20,-93,29,-66,-34,-35,-36,-73,-97,-92,]),'NULL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,20,26,27,28,30,32,33,34,35,36,37,41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,64,65,66,67,68,69,70,71,72,73,75,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,101,102,113,114,121,122,123,124,137,139,140,141,142,143,144,145,146,147,149,150,151,152,153,155,157,161,167,168,169,170,171,175,176,179,184,185,186,194,195,196,197,198,200,201,202,],[30,30,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-63,-67,30,30,-94,-95,-16,30,-58,-59,-60,-61,-62,-2,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-33,30,30,-56,30,30,30,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,30,-57,30,-75,-99,-17,-41,30,-42,-18,30,-78,-74,30,-79,30,30,-80,-64,-65,-37,30,30,-69,-96,30,30,-81,30,30,30,30,-98,-19,-20,-93,30,30,-66,-34,-35,-36,-73,-97,-92,30,30,]),'MAPOF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,20,26,27,28,30,32,33,34,35,36,37,41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,64,65,66,67,68,69,70,71,72,73,75,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,101,102,113,114,121,122,123,124,137,139,140,141,142,143,144,145,146,147,149,150,151,152,153,155,157,161,167,168,169,170,171,175,176,179,184,185,186,194,195,196,197,198,200,201,202,],[31,31,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-63,-67,31,31,-94,-95,-16,31,-58,-59,-60,-61,-62,-2,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-33,31,31,-56,31,31,31,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,31,-57,31,-75,-99,-17,-41,31,-42,-18,31,-78,-74,31,-79,31,31,-80,-64,-65,-37,31,31,-69,-96,31,31,-81,31,31,31,31,-98,-19,-20,-93,31,31,-66,-34,-35,-36,-73,-97,-92,31,31,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,26,27,28,30,32,33,34,35,36,37,41,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,64,65,66,67,68,69,70,71,72,73,75,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,101,102,113,114,121,122,123,124,134,135,136,137,139,140,141,142,143,144,145,146,147,149,150,151,152,153,154,155,157,158,160,161,167,168,169,170,171,175,176,178,179,181,182,183,184,185,186,189,194,195,196,197,198,200,201,202,],[16,16,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,42,-63,-67,59,60,16,62,16,-94,-95,-16,16,-58,-59,-60,-61,-62,-2,16,16,16,81,16,16,16,16,16,16,16,16,16,16,16,16,99,16,16,16,16,-33,16,16,-56,16,16,16,115,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,16,115,126,-57,16,-75,-99,-17,-41,16,-42,-18,163,164,165,16,-78,-74,16,-79,16,16,-80,-64,-65,-37,16,16,-69,-96,174,16,16,115,126,-81,16,16,16,16,-98,-19,-20,115,-93,115,115,126,16,16,-66,199,-34,-35,-36,-73,-97,-92,16,16,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,20,26,27,28,30,32,33,34,35,36,37,41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,61,64,65,66,67,68,69,70,71,72,73,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,100,101,102,103,105,106,107,110,113,114,121,122,123,124,137,139,140,141,142,143,144,145,146,147,149,150,151,152,153,155,156,157,161,166,167,168,169,170,171,173,175,176,179,184,185,186,194,195,196,197,198,200,201,202,205,206,],[32,32,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-63,48,32,32,-94,-95,-16,32,-58,-59,-60,-61,-62,-2,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,48,32,32,32,32,48,32,32,-56,32,32,32,48,48,48,-43,-44,-45,-46,-47,48,48,48,48,48,48,48,48,32,-57,48,32,-75,48,48,48,48,48,-99,48,-41,32,-42,48,32,-78,-74,32,-79,32,32,-80,-64,-65,-37,32,32,-69,-96,32,48,32,-81,48,32,32,32,32,-98,48,48,48,-93,32,32,-66,-34,-35,-36,-73,-97,-92,32,32,48,48,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,60,64,65,66,67,68,69,70,71,72,73,75,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,101,102,113,114,121,122,123,124,137,139,140,141,142,143,144,145,146,147,149,150,151,152,153,155,157,161,165,167,168,169,170,171,175,176,179,184,185,186,194,195,196,197,198,200,201,202,],[20,20,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,43,-67,20,63,64,66,67,20,-94,-95,69,-16,70,20,-58,-59,-60,-61,-62,72,73,74,-2,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,96,20,20,20,20,-33,20,20,-56,20,20,20,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,20,-57,20,-75,-99,-17,-41,20,-42,-18,20,-78,-74,20,-79,20,20,-80,-64,-65,-37,20,20,-69,-96,20,20,-81,183,20,20,20,20,-98,-19,-20,-93,20,20,-66,-34,-35,-36,-73,-97,-92,20,20,]),'NUMBER_INT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,20,26,27,28,30,32,33,34,35,36,37,41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,64,65,66,67,68,69,70,71,72,73,75,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,101,102,113,114,121,122,123,124,137,139,140,141,142,143,144,145,146,147,149,150,151,152,153,155,157,161,167,168,169,170,171,175,176,179,184,185,186,194,195,196,197,198,200,201,202,],[33,33,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-63,-67,33,33,-94,-95,-16,33,-58,-59,-60,-61,-62,-2,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-33,33,33,-56,33,33,33,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,33,-57,33,-75,-99,-17,-41,33,-42,-18,33,-78,-74,33,-79,33,33,-80,-64,-65,-37,33,33,-69,-96,33,33,-81,33,33,33,33,-98,-19,-20,-93,33,33,-66,-34,-35,-36,-73,-97,-92,33,33,]),'NUMBER_DOUBLE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,20,26,27,28,30,32,33,34,35,36,37,41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,64,65,66,67,68,69,70,71,72,73,75,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,101,102,113,114,121,122,123,124,137,139,140,141,142,143,144,145,146,147,149,150,151,152,153,155,157,161,167,168,169,170,171,175,176,179,184,185,186,194,195,196,197,198,200,201,202,],[34,34,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-63,-67,34,34,-94,-95,-16,34,-58,-59,-60,-61,-62,-2,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-33,34,34,-56,34,34,34,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,34,-57,34,-75,-99,-17,-41,34,-42,-18,34,-78,-74,34,-79,34,34,-80,-64,-65,-37,34,34,-69,-96,34,34,-81,34,34,34,34,-98,-19,-20,-93,34,34,-66,-34,-35,-36,-73,-97,-92,34,34,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,20,26,27,28,30,32,33,34,35,36,37,41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,64,65,66,67,68,69,70,71,72,73,75,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,101,102,113,114,121,122,123,124,137,139,140,141,142,143,144,145,146,147,149,150,151,152,153,155,157,161,167,168,169,170,171,175,176,179,184,185,186,194,195,196,197,198,200,201,202,],[35,35,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-63,-67,35,35,-94,-95,-16,35,-58,-59,-60,-61,-62,-2,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-33,35,35,-56,35,35,35,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,35,-57,35,-75,-99,-17,-41,35,-42,-18,35,-78,-74,35,-79,35,35,-80,-64,-65,-37,35,35,-69,-96,35,35,-81,35,35,35,35,-98,-19,-20,-93,35,35,-66,-34,-35,-36,-73,-97,-92,35,35,]),'BOOLEAN_TRUE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,20,26,27,28,30,32,33,34,35,36,37,41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,64,65,66,67,68,69,70,71,72,73,75,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,101,102,113,114,121,122,123,124,137,139,140,141,142,143,144,145,146,147,149,150,151,152,153,155,157,161,167,168,169,170,171,175,176,179,184,185,186,194,195,196,197,198,200,201,202,],[36,36,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-63,-67,36,36,-94,-95,-16,36,-58,-59,-60,-61,-62,-2,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-33,36,36,-56,36,36,36,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,36,-57,36,-75,-99,-17,-41,36,-42,-18,36,-78,-74,36,-79,36,36,-80,-64,-65,-37,36,36,-69,-96,36,36,-81,36,36,36,36,-98,-19,-20,-93,36,36,-66,-34,-35,-36,-73,-97,-92,36,36,]),'BOOLEAN_FALSE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,20,26,27,28,30,32,33,34,35,36,37,41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,64,65,66,67,68,69,70,71,72,73,75,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,101,102,113,114,121,122,123,124,137,139,140,141,142,143,144,145,146,147,149,150,151,152,153,155,157,161,167,168,169,170,171,175,176,179,184,185,186,194,195,196,197,198,200,201,202,],[37,37,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-63,-67,37,37,-94,-95,-16,37,-58,-59,-60,-61,-62,-2,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-33,37,37,-56,37,37,37,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,37,-57,37,-75,-99,-17,-41,37,-42,-18,37,-78,-74,37,-79,37,37,-80,-64,-65,-37,37,37,-69,-96,37,37,-81,37,37,37,37,-98,-19,-20,-93,37,37,-66,-34,-35,-36,-73,-97,-92,37,37,]),'LISTOF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,20,26,27,28,30,32,33,34,35,36,37,41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,64,65,66,67,68,69,70,71,72,73,75,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,101,102,113,114,121,122,123,124,137,139,140,141,142,143,144,145,146,147,149,150,151,152,153,155,157,161,167,168,169,170,171,175,176,179,184,185,186,194,195,196,197,198,200,201,202,],[38,38,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-63,-67,38,38,-94,-95,-16,38,-58,-59,-60,-61,-62,-2,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-33,38,38,-56,38,38,38,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,38,-57,38,-75,-99,-17,-41,38,-42,-18,38,-78,-74,38,-79,38,38,-80,-64,-65,-37,38,38,-69,-96,38,38,-81,38,38,38,38,-98,-19,-20,-93,38,38,-66,-34,-35,-36,-73,-97,-92,38,38,]),'ARRAYOF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,20,26,27,28,30,32,33,34,35,36,37,41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,64,65,66,67,68,69,70,71,72,73,75,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,101,102,113,114,121,122,123,124,137,139,140,141,142,143,144,145,146,147,149,150,151,152,153,155,157,161,167,168,169,170,171,175,176,179,184,185,186,194,195,196,197,198,200,201,202,],[39,39,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-63,-67,39,39,-94,-95,-16,39,-58,-59,-60,-61,-62,-2,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-33,39,39,-56,39,39,39,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,39,-57,39,-75,-99,-17,-41,39,-42,-18,39,-78,-74,39,-79,39,39,-80,-64,-65,-37,39,39,-69,-96,39,39,-81,39,39,39,39,-98,-19,-20,-93,39,39,-66,-34,-35,-36,-73,-97,-92,39,39,]),'READLINE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,20,26,27,28,30,32,33,34,35,36,37,41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,64,65,66,67,68,69,70,71,72,73,75,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,101,102,113,114,121,122,123,124,137,139,140,141,142,143,144,145,146,147,149,150,151,152,153,155,157,161,167,168,169,170,171,175,176,179,184,185,186,194,195,196,197,198,200,201,202,],[40,40,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-63,-67,40,40,-94,-95,-16,40,-58,-59,-60,-61,-62,-2,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-33,40,40,-56,40,40,40,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,40,-57,40,-75,-99,-17,-41,40,-42,-18,40,-78,-74,40,-79,40,40,-80,-64,-65,-37,40,40,-69,-96,40,40,-81,40,40,40,40,-98,-19,-20,-93,40,40,-66,-34,-35,-36,-73,-97,-92,40,40,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,30,33,34,35,36,37,41,68,71,79,81,82,83,84,85,86,87,88,89,90,91,92,93,97,113,114,121,123,124,139,146,147,149,152,153,161,171,175,176,179,186,194,195,196,197,198,200,],[-4,0,-1,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-63,-67,-94,-95,-16,-58,-59,-60,-61,-62,-2,-33,-56,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,-99,-17,-41,-42,-18,-78,-64,-65,-37,-69,-96,-81,-98,-19,-20,-93,-66,-34,-35,-36,-73,-97,-92,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,30,33,34,35,36,37,41,68,71,79,81,82,83,84,85,86,87,88,89,90,91,92,93,97,98,101,102,113,114,115,117,118,119,120,121,123,124,130,131,132,133,139,140,141,142,143,144,145,146,147,149,152,153,161,162,168,169,170,171,175,176,179,185,186,188,191,192,194,195,196,197,198,200,204,205,206,207,],[-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-63,-67,-94,-95,-16,-58,-59,-60,-61,-62,-2,-33,-56,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,-84,139,-75,-99,-17,-30,-26,-27,-28,-29,-41,-42,-18,161,-83,-85,-86,-78,-74,-4,-79,-4,-4,-80,-64,-65,-37,-69,-96,-81,-82,-76,186,-77,-98,-19,-20,-93,197,-66,-31,-87,-88,-34,-35,-36,-73,-97,-92,-32,-89,-90,-91,]),'ELSE':([3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,30,33,34,35,36,37,41,65,68,71,79,81,82,83,84,85,86,87,88,89,90,91,92,93,97,101,102,113,114,121,123,124,139,140,141,142,144,145,146,147,149,152,153,161,167,168,170,171,175,176,179,185,186,194,195,196,197,198,200,],[-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-63,-67,-94,-95,-16,-58,-59,-60,-61,-62,-2,104,-33,-56,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,104,-75,-99,-17,-41,-42,-18,-78,-74,-4,-79,-4,-80,-64,-65,-37,-69,-96,-81,104,-76,-77,187,-19,-20,-93,104,-66,-34,-35,-36,-73,-97,-92,]),'LBRACKET':([16,17,30,33,34,35,36,37,61,68,71,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,97,100,103,105,106,107,110,113,114,121,123,124,149,152,153,156,166,173,175,176,205,206,],[-63,45,-16,-58,-59,-60,-61,-62,45,45,-56,45,45,45,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,45,45,45,45,45,45,-99,45,-41,-42,45,-37,-69,-96,45,45,45,45,45,45,45,]),'DOT':([16,17,30,33,34,35,36,37,61,68,71,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,97,100,103,105,106,107,110,113,114,121,123,124,149,152,153,156,166,173,175,176,205,206,],[-63,46,-16,-58,-59,-60,-61,-62,46,46,-56,46,46,46,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,46,46,46,46,46,46,-99,46,-41,-42,46,-37,-69,-96,46,46,46,46,46,46,46,]),'PLUS':([16,17,30,33,34,35,36,37,61,68,71,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,97,100,103,105,106,107,110,113,114,121,123,124,149,152,153,156,166,173,175,176,205,206,],[-63,47,-16,-58,-59,-60,-61,-62,47,47,-56,47,47,47,-43,-44,-45,-46,-47,47,47,47,47,47,47,47,47,-57,47,47,47,47,47,47,-99,47,-41,-42,47,-37,-69,-96,47,47,47,47,47,47,47,]),'MULTIPLY':([16,17,30,33,34,35,36,37,61,68,71,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,97,100,103,105,106,107,110,113,114,121,123,124,149,152,153,156,166,173,175,176,205,206,],[-63,49,-16,-58,-59,-60,-61,-62,49,49,-56,49,49,49,-43,49,49,-46,-47,49,49,49,49,49,49,49,49,-57,49,49,49,49,49,49,-99,49,-41,-42,49,-37,-69,-96,49,49,49,49,49,49,49,]),'DIVIDE':([16,17,30,33,34,35,36,37,61,68,71,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,97,100,103,105,106,107,110,113,114,121,123,124,149,152,153,156,166,173,175,176,205,206,],[-63,50,-16,-58,-59,-60,-61,-62,50,50,-56,50,50,50,-43,50,50,-46,-47,50,50,50,50,50,50,50,50,-57,50,50,50,50,50,50,-99,50,-41,-42,50,-37,-69,-96,50,50,50,50,50,50,50,]),'LESS':([16,17,30,33,34,35,36,37,61,68,71,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,97,100,103,105,106,107,110,113,114,115,121,123,124,149,152,153,156,166,173,175,176,205,206,],[-63,51,-16,-58,-59,-60,-61,-62,51,51,-56,51,51,51,-43,-44,-45,-46,-47,-48,-49,-50,-51,51,51,51,51,-57,51,51,51,51,51,51,-99,51,154,-41,-42,51,-37,-69,-96,51,51,51,51,51,51,51,]),'GREATER':([16,17,30,33,34,35,36,37,61,68,71,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,97,100,103,105,106,107,110,113,114,121,123,124,149,152,153,156,166,173,174,175,176,199,205,206,],[-63,52,-16,-58,-59,-60,-61,-62,52,52,-56,52,52,52,-43,-44,-45,-46,-47,-48,-49,-50,-51,52,52,52,52,-57,52,52,52,52,52,52,-99,52,-41,-42,52,-37,-69,-96,52,52,52,188,52,52,204,52,52,]),'LESS_EQUAL':([16,17,30,33,34,35,36,37,61,68,71,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,97,100,103,105,106,107,110,113,114,121,123,124,149,152,153,156,166,173,175,176,205,206,],[-63,53,-16,-58,-59,-60,-61,-62,53,53,-56,53,53,53,-43,-44,-45,-46,-47,-48,-49,-50,-51,53,53,53,53,-57,53,53,53,53,53,53,-99,53,-41,-42,53,-37,-69,-96,53,53,53,53,53,53,53,]),'GREATER_EQUAL':([16,17,30,33,34,35,36,37,61,68,71,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,97,100,103,105,106,107,110,113,114,121,123,124,149,152,153,156,166,173,175,176,205,206,],[-63,54,-16,-58,-59,-60,-61,-62,54,54,-56,54,54,54,-43,-44,-45,-46,-47,-48,-49,-50,-51,54,54,54,54,-57,54,54,54,54,54,54,-99,54,-41,-42,54,-37,-69,-96,54,54,54,54,54,54,54,]),'EQUALS':([16,17,30,33,34,35,36,37,61,68,71,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,97,100,103,105,106,107,110,113,114,121,123,124,149,152,153,156,166,173,175,176,205,206,],[-63,55,-16,-58,-59,-60,-61,-62,55,55,-56,55,55,55,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,55,55,-57,55,55,55,55,55,55,-99,55,-41,-42,55,-37,-69,-96,55,55,55,55,55,55,55,]),'NOT_EQUALS':([16,17,30,33,34,35,36,37,61,68,71,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,97,100,103,105,106,107,110,113,114,121,123,124,149,152,153,156,166,173,175,176,205,206,],[-63,56,-16,-58,-59,-60,-61,-62,56,56,-56,56,56,56,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,56,56,-57,56,56,56,56,56,56,-99,56,-41,-42,56,-37,-69,-96,56,56,56,56,56,56,56,]),'AND':([16,17,30,33,34,35,36,37,61,68,71,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,97,100,103,105,106,107,110,113,114,121,123,124,149,152,153,156,166,173,175,176,205,206,],[-63,57,-16,-58,-59,-60,-61,-62,57,57,-56,57,57,57,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,57,-57,57,57,57,57,57,57,-99,57,-41,-42,57,-37,-69,-96,57,57,57,57,57,57,57,]),'OR':([16,17,30,33,34,35,36,37,61,68,71,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,97,100,103,105,106,107,110,113,114,121,123,124,149,152,153,156,166,173,175,176,205,206,],[-63,58,-16,-58,-59,-60,-61,-62,58,58,-56,58,58,58,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,58,58,58,58,58,58,-99,58,-41,-42,58,-37,-69,-96,58,58,58,58,58,58,58,]),'RPAREN':([16,30,33,34,35,36,37,43,61,71,72,73,74,77,78,79,81,82,83,84,85,86,87,88,89,90,91,92,93,96,97,100,105,106,107,108,109,111,112,113,115,117,118,119,120,121,123,127,128,129,149,152,153,156,166,172,173,177,180,183,188,193,204,],[-63,-16,-58,-59,-60,-61,-62,-72,97,-56,-72,-72,113,121,-71,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-22,-57,138,146,147,148,149,-39,152,153,-99,-30,-26,-27,-28,-29,-41,-42,159,-21,-24,-37,-69,-96,-70,184,-38,-40,-25,-23,-22,-31,203,-32,]),'COMMA':([16,30,33,34,35,36,37,43,71,72,73,77,78,79,81,82,83,84,85,86,87,88,89,90,91,92,93,97,108,109,111,112,113,115,117,118,119,120,121,123,128,129,149,152,153,156,172,173,174,177,180,188,204,],[-63,-16,-58,-59,-60,-61,-62,-72,-56,-72,-72,122,-71,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,150,-39,122,122,-99,-30,-26,-27,-28,-29,-41,-42,160,-24,-37,-69,-96,-70,-38,-40,189,-25,-23,-31,-32,]),'RBRACKET':([16,30,33,34,35,36,37,71,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,97,113,121,123,149,152,153,],[-63,-16,-58,-59,-60,-61,-62,-56,-68,123,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,-99,-41,-42,-37,-69,-96,]),'ARROW':([16,30,33,34,35,36,37,71,79,81,82,83,84,85,86,87,88,89,90,91,92,93,97,103,104,113,121,123,149,152,153,],[-63,-16,-58,-59,-60,-61,-62,-56,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,141,144,-99,-41,-42,-37,-69,-96,]),'LBRACE':([16,23,30,33,34,35,36,37,62,71,79,81,82,83,84,85,86,87,88,89,90,91,92,93,97,103,104,113,115,117,118,119,120,121,123,138,148,149,152,153,159,184,187,188,190,203,204,],[-63,65,-16,-58,-59,-60,-61,-62,98,-56,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,143,143,-99,-30,-26,-27,-28,-29,-41,-42,167,143,-37,-69,-96,143,143,143,-31,143,143,-32,]),'TO':([16,30,33,34,35,36,37,71,79,81,82,83,84,85,86,87,88,89,90,91,92,93,97,110,113,121,123,149,152,153,],[-63,-16,-58,-59,-60,-61,-62,-56,-68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,151,-99,-41,-42,-37,-69,-96,]),'ASSIGN':([16,42,59,115,116,117,118,119,120,125,188,191,192,204,],[44,75,94,-30,155,-26,-27,-28,-29,157,-31,201,202,-32,]),'COLON':([42,59,126,159,163,164,],[76,95,158,178,181,182,]),'TYPE_INT':([76,95,158,178,181,182,],[117,117,117,117,117,117,]),'TYPE_DOUBLE':([76,95,158,178,181,182,],[118,118,118,118,118,118,]),'TYPE_BOOLEAN':([76,95,158,178,181,182,],[119,119,119,119,119,119,]),'TYPE_STRING':([76,95,158,178,181,182,],[120,120,120,120,120,120,]),'IN':([99,],[137,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,141,143,144,],[2,168,169,170,]),'statement':([0,2,141,143,144,168,169,170,184,],[3,41,3,3,3,41,41,41,196,]),'declaration':([0,2,141,143,144,168,169,170,184,],[4,4,4,4,4,4,4,4,4,]),'function_def':([0,2,141,143,144,168,169,170,184,],[5,5,5,5,5,5,5,5,5,]),'class_def':([0,2,141,143,144,168,169,170,184,],[6,6,6,6,6,6,6,6,6,]),'for_loop':([0,2,141,143,144,168,169,170,184,],[7,7,7,7,7,7,7,7,7,]),'when_stmt':([0,2,141,143,144,168,169,170,184,],[8,8,8,8,8,8,8,8,8,]),'print_stmt':([0,2,141,143,144,168,169,170,184,],[9,9,9,9,9,9,9,9,9,]),'return_stmt':([0,2,141,143,144,168,169,170,184,],[10,10,10,10,10,10,10,10,10,]),'break_stmt':([0,2,141,143,144,168,169,170,184,],[11,11,11,11,11,11,11,11,11,]),'continue_stmt':([0,2,141,143,144,168,169,170,184,],[12,12,12,12,12,12,12,12,12,]),'if_else':([0,2,141,143,144,168,169,170,184,],[13,13,13,13,13,13,13,13,13,]),'expression_stmt':([0,2,141,143,144,168,169,170,184,],[14,14,14,14,14,14,14,14,14,]),'expression':([0,2,20,26,32,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,64,65,66,67,69,70,72,73,75,94,101,122,137,141,143,144,150,151,155,157,167,168,169,170,184,185,201,202,],[17,17,61,68,71,78,79,80,82,83,84,85,86,87,88,89,90,91,92,93,100,103,105,106,107,110,78,78,114,124,103,156,166,17,17,17,110,173,175,176,103,17,17,17,17,103,205,206,]),'expression_list':([43,72,73,],[77,111,112,]),'when_branches':([65,167,],[101,185,]),'when_branch':([65,101,167,185,],[102,140,102,140,]),'map_entries':([70,],[108,]),'map_entry':([70,150,],[109,172,]),'type':([76,95,158,178,181,182,],[116,125,177,190,191,192,]),'param_list_opt':([96,183,],[127,193,]),'param_list':([96,183,],[128,128,]),'param':([96,160,183,],[129,180,129,]),'class_body':([98,],[130,]),'class_member':([98,130,],[131,162,]),'property_def':([98,130,],[132,132,]),'method_def':([98,130,],[133,133,]),'block':([103,104,148,159,184,187,190,203,],[142,145,171,179,195,198,200,207,]),'loop_body':([184,],[194,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','kotlin_parser.py',71),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_multiple','kotlin_parser.py',75),
  ('statement_list -> statement','statement_list',1,'p_statement_list_single','kotlin_parser.py',80),
  ('statement_list -> <empty>','statement_list',0,'p_statement_list_empty','kotlin_parser.py',84),
  ('statement -> declaration','statement',1,'p_statement','kotlin_parser.py',88),
  ('statement -> function_def','statement',1,'p_statement','kotlin_parser.py',89),
  ('statement -> class_def','statement',1,'p_statement','kotlin_parser.py',90),
  ('statement -> for_loop','statement',1,'p_statement','kotlin_parser.py',91),
  ('statement -> when_stmt','statement',1,'p_statement','kotlin_parser.py',92),
  ('statement -> print_stmt','statement',1,'p_statement','kotlin_parser.py',93),
  ('statement -> return_stmt','statement',1,'p_statement','kotlin_parser.py',94),
  ('statement -> break_stmt','statement',1,'p_statement','kotlin_parser.py',95),
  ('statement -> continue_stmt','statement',1,'p_statement','kotlin_parser.py',96),
  ('statement -> if_else','statement',1,'p_statement','kotlin_parser.py',97),
  ('statement -> expression_stmt','statement',1,'p_statement','kotlin_parser.py',98),
  ('expression -> NULL','expression',1,'p_expression_null','kotlin_parser.py',105),
  ('declaration -> VAR ID ASSIGN expression','declaration',4,'p_declaration','kotlin_parser.py',114),
  ('declaration -> VAL ID ASSIGN expression','declaration',4,'p_declaration','kotlin_parser.py',115),
  ('declaration -> VAR ID COLON type ASSIGN expression','declaration',6,'p_declaration','kotlin_parser.py',116),
  ('declaration -> VAL ID COLON type ASSIGN expression','declaration',6,'p_declaration','kotlin_parser.py',117),
  ('param_list_opt -> param_list','param_list_opt',1,'p_param_list_opt','kotlin_parser.py',133),
  ('param_list_opt -> <empty>','param_list_opt',0,'p_param_list_opt','kotlin_parser.py',134),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','kotlin_parser.py',138),
  ('param_list -> param','param_list',1,'p_param_list','kotlin_parser.py',139),
  ('param -> ID COLON type','param',3,'p_param','kotlin_parser.py',143),
  ('type -> TYPE_INT','type',1,'p_type','kotlin_parser.py',147),
  ('type -> TYPE_DOUBLE','type',1,'p_type','kotlin_parser.py',148),
  ('type -> TYPE_BOOLEAN','type',1,'p_type','kotlin_parser.py',149),
  ('type -> TYPE_STRING','type',1,'p_type','kotlin_parser.py',150),
  ('type -> ID','type',1,'p_type','kotlin_parser.py',151),
  ('type -> ID LESS ID GREATER','type',4,'p_type','kotlin_parser.py',152),
  ('type -> ID LESS ID COMMA ID GREATER','type',6,'p_type','kotlin_parser.py',153),
  ('return_stmt -> RETURN expression','return_stmt',2,'p_return_stmt','kotlin_parser.py',165),
  ('for_loop -> FOR LPAREN ID IN expression RPAREN loop_body','for_loop',7,'p_for_loop','kotlin_parser.py',170),
  ('loop_body -> block','loop_body',1,'p_loop_body','kotlin_parser.py',175),
  ('loop_body -> statement','loop_body',1,'p_loop_body','kotlin_parser.py',176),
  ('expression -> MAPOF LPAREN map_entries RPAREN','expression',4,'p_expression_map','kotlin_parser.py',181),
  ('map_entries -> map_entries COMMA map_entry','map_entries',3,'p_map_entries_multiple','kotlin_parser.py',185),
  ('map_entries -> map_entry','map_entries',1,'p_map_entries_single','kotlin_parser.py',189),
  ('map_entry -> expression TO expression','map_entry',3,'p_map_entry','kotlin_parser.py',193),
  ('expression -> ID LPAREN expression_list RPAREN','expression',4,'p_expression_call_func','kotlin_parser.py',197),
  ('expression -> expression LBRACKET expression RBRACKET','expression',4,'p_expression_index','kotlin_parser.py',201),
  ('expression -> expression DOT ID','expression',3,'p_expression_member','kotlin_parser.py',205),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binary','kotlin_parser.py',296),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binary','kotlin_parser.py',297),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binary','kotlin_parser.py',298),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binary','kotlin_parser.py',299),
  ('expression -> expression LESS expression','expression',3,'p_expression_binary','kotlin_parser.py',300),
  ('expression -> expression GREATER expression','expression',3,'p_expression_binary','kotlin_parser.py',301),
  ('expression -> expression LESS_EQUAL expression','expression',3,'p_expression_binary','kotlin_parser.py',302),
  ('expression -> expression GREATER_EQUAL expression','expression',3,'p_expression_binary','kotlin_parser.py',303),
  ('expression -> expression EQUALS expression','expression',3,'p_expression_binary','kotlin_parser.py',304),
  ('expression -> expression NOT_EQUALS expression','expression',3,'p_expression_binary','kotlin_parser.py',305),
  ('expression -> expression AND expression','expression',3,'p_expression_binary','kotlin_parser.py',306),
  ('expression -> expression OR expression','expression',3,'p_expression_binary','kotlin_parser.py',307),
  ('expression -> MINUS expression','expression',2,'p_expression_unary','kotlin_parser.py',315),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','kotlin_parser.py',319),
  ('expression -> NUMBER_INT','expression',1,'p_expression_literal','kotlin_parser.py',323),
  ('expression -> NUMBER_DOUBLE','expression',1,'p_expression_literal','kotlin_parser.py',324),
  ('expression -> STRING','expression',1,'p_expression_literal','kotlin_parser.py',325),
  ('expression -> BOOLEAN_TRUE','expression',1,'p_expression_literal','kotlin_parser.py',326),
  ('expression -> BOOLEAN_FALSE','expression',1,'p_expression_literal','kotlin_parser.py',327),
  ('expression -> ID','expression',1,'p_expression_id','kotlin_parser.py',343),
  ('print_stmt -> PRINTLN LPAREN expression RPAREN','print_stmt',4,'p_print_stmt','kotlin_parser.py',351),
  ('print_stmt -> PRINT LPAREN expression RPAREN','print_stmt',4,'p_print_stmt_print','kotlin_parser.py',355),
  ('block -> LBRACE statement_list RBRACE','block',3,'p_block','kotlin_parser.py',360),
  ('expression_stmt -> expression','expression_stmt',1,'p_expression_stmt','kotlin_parser.py',365),
  ('expression -> ID ASSIGN expression','expression',3,'p_expression_assignment','kotlin_parser.py',371),
  ('expression -> LISTOF LPAREN expression_list RPAREN','expression',4,'p_expression_listOf','kotlin_parser.py',381),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list_multiple','kotlin_parser.py',386),
  ('expression_list -> expression','expression_list',1,'p_expression_list_single','kotlin_parser.py',391),
  ('expression_list -> <empty>','expression_list',0,'p_expression_list_empty','kotlin_parser.py',395),
  ('when_stmt -> WHEN LPAREN expression RPAREN LBRACE when_branches RBRACE','when_stmt',7,'p_when_stmt','kotlin_parser.py',401),
  ('when_branches -> when_branches when_branch','when_branches',2,'p_when_branches_multiple','kotlin_parser.py',405),
  ('when_branches -> when_branch','when_branches',1,'p_when_branches_single','kotlin_parser.py',410),
  ('when_branch -> expression ARROW statement_list','when_branch',3,'p_when_branch_expression','kotlin_parser.py',414),
  ('when_branch -> ELSE ARROW statement_list','when_branch',3,'p_when_branch_else','kotlin_parser.py',418),
  ('when_stmt -> WHEN LBRACE when_branches RBRACE','when_stmt',4,'p_when_stmt_without_expr','kotlin_parser.py',423),
  ('when_branch -> expression block','when_branch',2,'p_when_branch_expression_brace','kotlin_parser.py',427),
  ('when_branch -> ELSE block','when_branch',2,'p_when_branch_else_brace','kotlin_parser.py',431),
  ('class_def -> CLASS ID LBRACE class_body RBRACE','class_def',5,'p_class_def','kotlin_parser.py',495),
  ('class_body -> class_body class_member','class_body',2,'p_class_body_multiple','kotlin_parser.py',499),
  ('class_body -> class_member','class_body',1,'p_class_body_single','kotlin_parser.py',504),
  ('class_body -> <empty>','class_body',0,'p_class_body_empty','kotlin_parser.py',508),
  ('class_member -> property_def','class_member',1,'p_class_member','kotlin_parser.py',512),
  ('class_member -> method_def','class_member',1,'p_class_member','kotlin_parser.py',513),
  ('property_def -> VAR ID COLON type','property_def',4,'p_property_def','kotlin_parser.py',517),
  ('property_def -> VAL ID COLON type','property_def',4,'p_property_def','kotlin_parser.py',518),
  ('property_def -> VAR ID COLON type ASSIGN expression','property_def',6,'p_property_def','kotlin_parser.py',519),
  ('property_def -> VAL ID COLON type ASSIGN expression','property_def',6,'p_property_def','kotlin_parser.py',520),
  ('method_def -> FUN ID LPAREN param_list_opt RPAREN block','method_def',6,'p_method_def','kotlin_parser.py',530),
  ('function_def -> FUN ID LPAREN param_list_opt RPAREN COLON type block','function_def',8,'p_function_def','kotlin_parser.py',557),
  ('function_def -> FUN ID LPAREN param_list_opt RPAREN block','function_def',6,'p_function_def','kotlin_parser.py',558),
  ('break_stmt -> BREAK','break_stmt',1,'p_break_stmt','kotlin_parser.py',597),
  ('continue_stmt -> CONTINUE','continue_stmt',1,'p_continue_stmt','kotlin_parser.py',602),
  ('expression -> ARRAYOF LPAREN expression_list RPAREN','expression',4,'p_expression_arrayof','kotlin_parser.py',746),
  ('if_else -> IF LPAREN expression RPAREN block ELSE block','if_else',7,'p_if_else','kotlin_parser.py',750),
  ('if_else -> IF LPAREN expression RPAREN block','if_else',5,'p_if','kotlin_parser.py',755),
  ('expression -> READLINE LPAREN RPAREN','expression',3,'p_expression_readline','kotlin_parser.py',766),
]
