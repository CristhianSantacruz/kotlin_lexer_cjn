
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQUALSNOT_EQUALSleftLESSGREATERLESS_EQUALGREATER_EQUALleftPLUSMINUSleftMULTIPLYDIVIDErightUMINUSABSTRACT AND ARRAYOF ARROW ASSIGN BOOLEAN_FALSE BOOLEAN_TRUE BREAK CATCH CLASS COLON COMMA COMPANION CONSTRUCTOR CONTAINS CONTINUE CROSSINLINE DATA DIVIDE DOT ELSE ELVIS ENUM EQUALS EXTENDS FILTER FINAL FINALLY FOR FUN GREATER GREATER_EQUAL ID IF IMPLEMENTS IN INDICES INIT INLINE INNER INTERFACE INTERNAL LATEINIT LBRACE LBRACKET LESS LESS_EQUAL LISTOF LPAREN MAPOF MINUS MODULO MULTIPLY NOINLINE NOT_EQUALS NUMBER_DOUBLE NUMBER_INT OBJECT OPEN OR OUT OVERRIDE PLUS PRINT PRINTLN PRIVATE PROTECTED PUBLIC QUESTION RANGE RBRACE RBRACKET REIFIED RETURN RPAREN SEALED SEMICOLON STRING SUM SUPER THIS TO TRY TYPE_BOOLEAN TYPE_DOUBLE TYPE_INT TYPE_STRING VAL VAR WHEN WHILEprogram : statement_liststatement_list : statement_list statementstatement_list : statementstatement_list : statement : declaration\n| function_def\n| function_def_no_return\n| class_def\n| for_loop\n| when_stmt\n| print_stmt\n| return_stmt\n| expression_stmtdeclaration : VAR ID ASSIGN expression\n| VAL ID ASSIGN expressionfunction_def : FUN ID LPAREN param_list_opt RPAREN COLON type blockparam_list_opt : param_list\n| param_list : param_list COMMA param\n| paramparam : ID COLON typetype : TYPE_INT\n| TYPE_DOUBLE\n| TYPE_BOOLEAN\n| TYPE_STRING\n| IDreturn_stmt : RETURN expressionfor_loop : FOR LPAREN ID IN expression RPAREN loop_bodyloop_body : block\n| statementexpression : MAPOF LPAREN map_entries RPARENmap_entries : map_entries COMMA map_entrymap_entries : map_entrymap_entry : expression TO expressionexpression : expression PLUS expression\n| expression MINUS expression\n| expression MULTIPLY expression\n| expression DIVIDE expression\n| expression LESS expression\n| expression GREATER expression\n| expression LESS_EQUAL expression\n| expression GREATER_EQUAL expression\n| expression EQUALS expression\n| expression NOT_EQUALS expression\n| expression AND expression\n| expression OR expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBER_INT\n| NUMBER_DOUBLE\n| STRING\n| BOOLEAN_TRUE\n| BOOLEAN_FALSEexpression : IDprint_stmt : PRINTLN LPAREN expression RPARENprint_stmt : PRINT LPAREN expression RPARENblock : LBRACE statement_list RBRACEexpression_stmt : expressionexpression : LISTOF LPAREN expression_list RPARENexpression_list : expression_list COMMA expressionexpression_list : expressionexpression_list : when_stmt : WHEN LPAREN expression RPAREN LBRACE when_branches RBRACEwhen_branches : when_branches when_branchwhen_branches : when_branchwhen_branch : expression ARROW statement_listwhen_branch : ELSE ARROW statement_listwhen_stmt : WHEN LBRACE when_branches RBRACEfunction_def_no_return : FUN ID LPAREN param_list_opt RPAREN blockclass_def : CLASS ID LBRACE class_body RBRACEclass_body : class_body class_memberclass_body : class_memberclass_body : class_member : property_def\n| method_defproperty_def : VAR ID COLON type\n| VAL ID COLON type\n| VAR ID COLON type ASSIGN expression\n| VAL ID COLON type ASSIGN expressionmethod_def : FUN ID LPAREN param_list_opt RPAREN block'
    
_lr_action_items = {'VAR':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,27,28,29,30,31,33,56,58,61,62,63,64,65,66,67,68,69,70,71,72,75,76,90,91,96,97,98,99,105,107,108,109,110,111,114,119,120,126,127,131,133,134,135,136,138,139,144,147,148,149,151,152,153,154,155,156,160,161,162,],[13,13,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-54,-58,-49,-50,-51,-52,-53,-2,-27,-47,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-48,100,-14,-15,100,-72,-74,-75,-68,13,13,-55,-56,-31,-59,-70,-71,13,13,-26,-22,-23,-24,-25,-69,13,13,13,-76,-77,-28,-29,-30,-63,-16,-57,-78,-79,-80,]),'VAL':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,27,28,29,30,31,33,56,58,61,62,63,64,65,66,67,68,69,70,71,72,75,76,90,91,96,97,98,99,105,107,108,109,110,111,114,119,120,126,127,131,133,134,135,136,138,139,144,147,148,149,151,152,153,154,155,156,160,161,162,],[16,16,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-54,-58,-49,-50,-51,-52,-53,-2,-27,-47,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-48,101,-14,-15,101,-72,-74,-75,-68,16,16,-55,-56,-31,-59,-70,-71,16,16,-26,-22,-23,-24,-25,-69,16,16,16,-76,-77,-28,-29,-30,-63,-16,-57,-78,-79,-80,]),'FUN':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,27,28,29,30,31,33,56,58,61,62,63,64,65,66,67,68,69,70,71,72,75,76,90,91,96,97,98,99,105,107,108,109,110,111,114,119,120,126,127,131,133,134,135,136,138,139,144,147,148,149,151,152,153,154,155,156,160,161,162,],[17,17,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-54,-58,-49,-50,-51,-52,-53,-2,-27,-47,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-48,102,-14,-15,102,-72,-74,-75,-68,17,17,-55,-56,-31,-59,-70,-71,17,17,-26,-22,-23,-24,-25,-69,17,17,17,-76,-77,-28,-29,-30,-63,-16,-57,-78,-79,-80,]),'CLASS':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,27,28,29,30,31,33,56,58,61,62,63,64,65,66,67,68,69,70,71,72,75,90,91,105,107,108,109,110,111,114,119,126,127,138,139,144,147,151,152,153,154,155,156,],[19,19,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-54,-58,-49,-50,-51,-52,-53,-2,-27,-47,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-48,-14,-15,-68,19,19,-55,-56,-31,-59,-70,19,19,-69,19,19,19,-28,-29,-30,-63,-16,-57,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,27,28,29,30,31,33,56,58,61,62,63,64,65,66,67,68,69,70,71,72,75,90,91,105,107,108,109,110,111,114,119,126,127,138,139,144,147,151,152,153,154,155,156,],[20,20,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-54,-58,-49,-50,-51,-52,-53,-2,-27,-47,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-48,-14,-15,-68,20,20,-55,-56,-31,-59,-70,20,20,-69,20,20,20,-28,-29,-30,-63,-16,-57,]),'WHEN':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,27,28,29,30,31,33,56,58,61,62,63,64,65,66,67,68,69,70,71,72,75,90,91,105,107,108,109,110,111,114,119,126,127,138,139,144,147,151,152,153,154,155,156,],[21,21,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-54,-58,-49,-50,-51,-52,-53,-2,-27,-47,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-48,-14,-15,-68,21,21,-55,-56,-31,-59,-70,21,21,-69,21,21,21,-28,-29,-30,-63,-16,-57,]),'PRINTLN':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,27,28,29,30,31,33,56,58,61,62,63,64,65,66,67,68,69,70,71,72,75,90,91,105,107,108,109,110,111,114,119,126,127,138,139,144,147,151,152,153,154,155,156,],[22,22,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-54,-58,-49,-50,-51,-52,-53,-2,-27,-47,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-48,-14,-15,-68,22,22,-55,-56,-31,-59,-70,22,22,-69,22,22,22,-28,-29,-30,-63,-16,-57,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,27,28,29,30,31,33,56,58,61,62,63,64,65,66,67,68,69,70,71,72,75,90,91,105,107,108,109,110,111,114,119,126,127,138,139,144,147,151,152,153,154,155,156,],[23,23,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-54,-58,-49,-50,-51,-52,-53,-2,-27,-47,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-48,-14,-15,-68,23,23,-55,-56,-31,-59,-70,23,23,-69,23,23,23,-28,-29,-30,-63,-16,-57,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,27,28,29,30,31,33,56,58,61,62,63,64,65,66,67,68,69,70,71,72,75,90,91,105,107,108,109,110,111,114,119,126,127,138,139,144,147,151,152,153,154,155,156,],[24,24,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-54,-58,-49,-50,-51,-52,-53,-2,-27,-47,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-48,-14,-15,-68,24,24,-55,-56,-31,-59,-70,24,24,-69,24,24,24,-28,-29,-30,-63,-16,-57,]),'MAPOF':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,18,24,26,27,28,29,30,31,33,35,36,37,38,39,40,41,42,43,44,45,46,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,79,80,90,91,103,105,106,107,108,109,110,111,112,113,114,115,119,125,126,127,138,139,144,145,147,151,152,153,154,155,156,157,158,],[25,25,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-54,-58,25,25,25,-49,-50,-51,-52,-53,-2,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-27,25,-47,25,25,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,25,-48,25,-65,-14,-15,25,-68,-64,25,25,-55,-56,-31,25,25,-59,25,-70,25,25,25,-69,25,25,25,25,-28,-29,-30,-63,-16,-57,25,25,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,18,24,26,27,28,29,30,31,33,35,36,37,38,39,40,41,42,43,44,45,46,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,78,79,80,81,83,84,87,89,90,91,103,105,106,107,108,109,110,111,112,113,114,115,119,124,125,126,127,129,130,138,139,144,145,147,151,152,153,154,155,156,157,158,160,161,],[26,26,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-54,36,26,26,26,-49,-50,-51,-52,-53,-2,26,26,26,26,26,26,26,26,26,26,26,26,36,26,26,26,26,36,26,-47,26,26,-35,-36,-37,-38,36,36,36,36,36,36,36,36,26,-48,36,26,-65,36,36,36,36,36,36,36,26,-68,-64,26,26,-55,-56,-31,26,26,-59,26,-70,36,26,26,26,36,36,-69,26,26,26,26,-28,-29,-30,-63,-16,-57,26,26,36,36,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,48,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,79,80,90,91,103,105,106,107,108,109,110,111,112,113,114,115,119,123,125,126,127,138,139,144,145,147,151,152,153,154,155,156,157,158,],[18,18,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-54,-58,18,51,52,54,55,18,57,18,-49,-50,-51,-52,-53,59,-2,18,18,18,18,18,18,18,18,18,18,18,18,74,18,18,18,18,-27,18,-47,18,18,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,18,-48,18,-65,-14,-15,18,-68,-64,18,18,-55,-56,-31,18,18,-59,18,-70,143,18,18,18,-69,18,18,18,18,-28,-29,-30,-63,-16,-57,18,18,]),'NUMBER_INT':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,18,24,26,27,28,29,30,31,33,35,36,37,38,39,40,41,42,43,44,45,46,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,79,80,90,91,103,105,106,107,108,109,110,111,112,113,114,115,119,125,126,127,138,139,144,145,147,151,152,153,154,155,156,157,158,],[27,27,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-54,-58,27,27,27,-49,-50,-51,-52,-53,-2,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-27,27,-47,27,27,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,27,-48,27,-65,-14,-15,27,-68,-64,27,27,-55,-56,-31,27,27,-59,27,-70,27,27,27,-69,27,27,27,27,-28,-29,-30,-63,-16,-57,27,27,]),'NUMBER_DOUBLE':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,18,24,26,27,28,29,30,31,33,35,36,37,38,39,40,41,42,43,44,45,46,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,79,80,90,91,103,105,106,107,108,109,110,111,112,113,114,115,119,125,126,127,138,139,144,145,147,151,152,153,154,155,156,157,158,],[28,28,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-54,-58,28,28,28,-49,-50,-51,-52,-53,-2,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-27,28,-47,28,28,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,28,-48,28,-65,-14,-15,28,-68,-64,28,28,-55,-56,-31,28,28,-59,28,-70,28,28,28,-69,28,28,28,28,-28,-29,-30,-63,-16,-57,28,28,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,18,24,26,27,28,29,30,31,33,35,36,37,38,39,40,41,42,43,44,45,46,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,79,80,90,91,103,105,106,107,108,109,110,111,112,113,114,115,119,125,126,127,138,139,144,145,147,151,152,153,154,155,156,157,158,],[29,29,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-54,-58,29,29,29,-49,-50,-51,-52,-53,-2,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-27,29,-47,29,29,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,29,-48,29,-65,-14,-15,29,-68,-64,29,29,-55,-56,-31,29,29,-59,29,-70,29,29,29,-69,29,29,29,29,-28,-29,-30,-63,-16,-57,29,29,]),'BOOLEAN_TRUE':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,18,24,26,27,28,29,30,31,33,35,36,37,38,39,40,41,42,43,44,45,46,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,79,80,90,91,103,105,106,107,108,109,110,111,112,113,114,115,119,125,126,127,138,139,144,145,147,151,152,153,154,155,156,157,158,],[30,30,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-54,-58,30,30,30,-49,-50,-51,-52,-53,-2,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-27,30,-47,30,30,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,30,-48,30,-65,-14,-15,30,-68,-64,30,30,-55,-56,-31,30,30,-59,30,-70,30,30,30,-69,30,30,30,30,-28,-29,-30,-63,-16,-57,30,30,]),'BOOLEAN_FALSE':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,18,24,26,27,28,29,30,31,33,35,36,37,38,39,40,41,42,43,44,45,46,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,79,80,90,91,103,105,106,107,108,109,110,111,112,113,114,115,119,125,126,127,138,139,144,145,147,151,152,153,154,155,156,157,158,],[31,31,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-54,-58,31,31,31,-49,-50,-51,-52,-53,-2,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-27,31,-47,31,31,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,31,-48,31,-65,-14,-15,31,-68,-64,31,31,-55,-56,-31,31,31,-59,31,-70,31,31,31,-69,31,31,31,31,-28,-29,-30,-63,-16,-57,31,31,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,24,26,27,28,29,30,31,33,35,36,37,38,39,40,41,42,43,44,45,46,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,79,80,90,91,100,101,102,103,105,106,107,108,109,110,111,112,113,114,115,116,118,119,125,126,127,137,138,139,141,142,143,144,145,147,151,152,153,154,155,156,157,158,],[14,14,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,34,-54,-58,47,48,14,50,14,14,-49,-50,-51,-52,-53,-2,14,14,14,14,14,14,14,14,14,14,14,14,77,14,14,14,14,-27,14,-47,14,14,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,14,92,-48,14,-65,-14,-15,121,122,123,14,-68,-64,14,14,-55,-56,-31,14,14,-59,14,131,92,-70,14,14,14,131,-69,14,131,131,92,14,14,14,-28,-29,-30,-63,-16,-57,14,14,]),'LISTOF':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,18,24,26,27,28,29,30,31,33,35,36,37,38,39,40,41,42,43,44,45,46,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,79,80,90,91,103,105,106,107,108,109,110,111,112,113,114,115,119,125,126,127,138,139,144,145,147,151,152,153,154,155,156,157,158,],[32,32,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-54,-58,32,32,32,-49,-50,-51,-52,-53,-2,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-27,32,-47,32,32,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,32,-48,32,-65,-14,-15,32,-68,-64,32,32,-55,-56,-31,32,32,-59,32,-70,32,32,32,-69,32,32,32,32,-28,-29,-30,-63,-16,-57,32,32,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,14,15,27,28,29,30,31,33,56,58,61,62,63,64,65,66,67,68,69,70,71,72,75,90,91,105,109,110,111,114,119,138,151,152,153,154,155,156,],[-4,0,-1,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-54,-58,-49,-50,-51,-52,-53,-2,-27,-47,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-48,-14,-15,-68,-55,-56,-31,-59,-70,-69,-28,-29,-30,-63,-16,-57,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,14,15,27,28,29,30,31,33,56,58,61,62,63,64,65,66,67,68,69,70,71,72,75,76,79,80,90,91,96,97,98,99,105,106,107,108,109,110,111,114,119,120,126,127,131,133,134,135,136,138,139,145,147,148,149,151,152,153,154,155,156,160,161,162,],[-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-54,-58,-49,-50,-51,-52,-53,-2,-27,-47,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-48,-73,105,-65,-14,-15,119,-72,-74,-75,-68,-64,-4,-4,-55,-56,-31,-59,-70,-71,-66,-67,-26,-22,-23,-24,-25,-69,-4,154,156,-76,-77,-28,-29,-30,-63,-16,-57,-78,-79,-80,]),'ELSE':([3,4,5,6,7,8,9,10,11,12,14,15,27,28,29,30,31,33,53,56,58,61,62,63,64,65,66,67,68,69,70,71,72,75,79,80,90,91,105,106,107,108,109,110,111,114,119,125,126,127,138,145,151,152,153,154,155,156,],[-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-54,-58,-49,-50,-51,-52,-53,-2,82,-27,-47,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-48,82,-65,-14,-15,-68,-64,-4,-4,-55,-56,-31,-59,-70,82,-66,-67,-69,82,-28,-29,-30,-63,-16,-57,]),'PLUS':([14,15,27,28,29,30,31,49,56,58,61,62,63,64,65,66,67,68,69,70,71,72,75,78,81,83,84,87,89,90,91,111,114,124,129,130,160,161,],[-54,35,-49,-50,-51,-52,-53,35,35,-47,-35,-36,-37,-38,35,35,35,35,35,35,35,35,-48,35,35,35,35,35,35,35,35,-31,-59,35,35,35,35,35,]),'MULTIPLY':([14,15,27,28,29,30,31,49,56,58,61,62,63,64,65,66,67,68,69,70,71,72,75,78,81,83,84,87,89,90,91,111,114,124,129,130,160,161,],[-54,37,-49,-50,-51,-52,-53,37,37,-47,37,37,-37,-38,37,37,37,37,37,37,37,37,-48,37,37,37,37,37,37,37,37,-31,-59,37,37,37,37,37,]),'DIVIDE':([14,15,27,28,29,30,31,49,56,58,61,62,63,64,65,66,67,68,69,70,71,72,75,78,81,83,84,87,89,90,91,111,114,124,129,130,160,161,],[-54,38,-49,-50,-51,-52,-53,38,38,-47,38,38,-37,-38,38,38,38,38,38,38,38,38,-48,38,38,38,38,38,38,38,38,-31,-59,38,38,38,38,38,]),'LESS':([14,15,27,28,29,30,31,49,56,58,61,62,63,64,65,66,67,68,69,70,71,72,75,78,81,83,84,87,89,90,91,111,114,124,129,130,160,161,],[-54,39,-49,-50,-51,-52,-53,39,39,-47,-35,-36,-37,-38,-39,-40,-41,-42,39,39,39,39,-48,39,39,39,39,39,39,39,39,-31,-59,39,39,39,39,39,]),'GREATER':([14,15,27,28,29,30,31,49,56,58,61,62,63,64,65,66,67,68,69,70,71,72,75,78,81,83,84,87,89,90,91,111,114,124,129,130,160,161,],[-54,40,-49,-50,-51,-52,-53,40,40,-47,-35,-36,-37,-38,-39,-40,-41,-42,40,40,40,40,-48,40,40,40,40,40,40,40,40,-31,-59,40,40,40,40,40,]),'LESS_EQUAL':([14,15,27,28,29,30,31,49,56,58,61,62,63,64,65,66,67,68,69,70,71,72,75,78,81,83,84,87,89,90,91,111,114,124,129,130,160,161,],[-54,41,-49,-50,-51,-52,-53,41,41,-47,-35,-36,-37,-38,-39,-40,-41,-42,41,41,41,41,-48,41,41,41,41,41,41,41,41,-31,-59,41,41,41,41,41,]),'GREATER_EQUAL':([14,15,27,28,29,30,31,49,56,58,61,62,63,64,65,66,67,68,69,70,71,72,75,78,81,83,84,87,89,90,91,111,114,124,129,130,160,161,],[-54,42,-49,-50,-51,-52,-53,42,42,-47,-35,-36,-37,-38,-39,-40,-41,-42,42,42,42,42,-48,42,42,42,42,42,42,42,42,-31,-59,42,42,42,42,42,]),'EQUALS':([14,15,27,28,29,30,31,49,56,58,61,62,63,64,65,66,67,68,69,70,71,72,75,78,81,83,84,87,89,90,91,111,114,124,129,130,160,161,],[-54,43,-49,-50,-51,-52,-53,43,43,-47,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,43,43,-48,43,43,43,43,43,43,43,43,-31,-59,43,43,43,43,43,]),'NOT_EQUALS':([14,15,27,28,29,30,31,49,56,58,61,62,63,64,65,66,67,68,69,70,71,72,75,78,81,83,84,87,89,90,91,111,114,124,129,130,160,161,],[-54,44,-49,-50,-51,-52,-53,44,44,-47,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,44,44,-48,44,44,44,44,44,44,44,44,-31,-59,44,44,44,44,44,]),'AND':([14,15,27,28,29,30,31,49,56,58,61,62,63,64,65,66,67,68,69,70,71,72,75,78,81,83,84,87,89,90,91,111,114,124,129,130,160,161,],[-54,45,-49,-50,-51,-52,-53,45,45,-47,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,45,-48,45,45,45,45,45,45,45,45,-31,-59,45,45,45,45,45,]),'OR':([14,15,27,28,29,30,31,49,56,58,61,62,63,64,65,66,67,68,69,70,71,72,75,78,81,83,84,87,89,90,91,111,114,124,129,130,160,161,],[-54,46,-49,-50,-51,-52,-53,46,46,-47,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-48,46,46,46,46,46,46,46,46,-31,-59,46,46,46,46,46,]),'RPAREN':([14,27,28,29,30,31,49,58,59,61,62,63,64,65,66,67,68,69,70,71,72,74,75,78,83,84,85,86,88,89,93,94,95,111,114,124,128,129,130,131,132,133,134,135,136,140,143,150,],[-54,-49,-50,-51,-52,-53,75,-47,-62,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-18,-48,104,109,110,111,-33,114,-61,117,-17,-20,-31,-59,144,-32,-34,-60,-26,-21,-22,-23,-24,-25,-19,-18,159,]),'ARROW':([14,27,28,29,30,31,58,61,62,63,64,65,66,67,68,69,70,71,72,75,81,82,111,114,],[-54,-49,-50,-51,-52,-53,-47,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-48,107,108,-31,-59,]),'TO':([14,27,28,29,30,31,58,61,62,63,64,65,66,67,68,69,70,71,72,75,87,111,114,],[-54,-49,-50,-51,-52,-53,-47,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-48,113,-31,-59,]),'COMMA':([14,27,28,29,30,31,58,59,61,62,63,64,65,66,67,68,69,70,71,72,75,85,86,88,89,94,95,111,114,128,129,130,131,132,133,134,135,136,140,],[-54,-49,-50,-51,-52,-53,-47,-62,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-48,112,-33,115,-61,118,-20,-31,-59,-32,-34,-60,-26,-21,-22,-23,-24,-25,-19,]),'LBRACE':([21,50,104,117,131,133,134,135,136,144,146,159,],[53,76,125,139,-26,-22,-23,-24,-25,139,139,139,]),'ASSIGN':([34,47,131,133,134,135,136,148,149,],[60,73,-26,-22,-23,-24,-25,157,158,]),'IN':([77,],[103,]),'COLON':([92,117,121,122,],[116,137,141,142,]),'TYPE_INT':([116,137,141,142,],[133,133,133,133,]),'TYPE_DOUBLE':([116,137,141,142,],[134,134,134,134,]),'TYPE_BOOLEAN':([116,137,141,142,],[135,135,135,135,]),'TYPE_STRING':([116,137,141,142,],[136,136,136,136,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,107,108,139,],[2,126,127,147,]),'statement':([0,2,107,108,126,127,139,144,147,],[3,33,3,3,33,33,3,153,33,]),'declaration':([0,2,107,108,126,127,139,144,147,],[4,4,4,4,4,4,4,4,4,]),'function_def':([0,2,107,108,126,127,139,144,147,],[5,5,5,5,5,5,5,5,5,]),'function_def_no_return':([0,2,107,108,126,127,139,144,147,],[6,6,6,6,6,6,6,6,6,]),'class_def':([0,2,107,108,126,127,139,144,147,],[7,7,7,7,7,7,7,7,7,]),'for_loop':([0,2,107,108,126,127,139,144,147,],[8,8,8,8,8,8,8,8,8,]),'when_stmt':([0,2,107,108,126,127,139,144,147,],[9,9,9,9,9,9,9,9,9,]),'print_stmt':([0,2,107,108,126,127,139,144,147,],[10,10,10,10,10,10,10,10,10,]),'return_stmt':([0,2,107,108,126,127,139,144,147,],[11,11,11,11,11,11,11,11,11,]),'expression_stmt':([0,2,107,108,126,127,139,144,147,],[12,12,12,12,12,12,12,12,12,]),'expression':([0,2,18,24,26,35,36,37,38,39,40,41,42,43,44,45,46,52,53,54,55,57,59,60,73,79,103,107,108,112,113,115,125,126,127,139,144,145,147,157,158,],[15,15,49,56,58,61,62,63,64,65,66,67,68,69,70,71,72,78,81,83,84,87,89,90,91,81,124,15,15,87,129,130,81,15,15,15,15,81,15,160,161,]),'when_branches':([53,125,],[79,145,]),'when_branch':([53,79,125,145,],[80,106,80,106,]),'map_entries':([57,],[85,]),'map_entry':([57,112,],[86,128,]),'expression_list':([59,],[88,]),'param_list_opt':([74,143,],[93,150,]),'param_list':([74,143,],[94,94,]),'param':([74,118,143,],[95,140,95,]),'class_body':([76,],[96,]),'class_member':([76,96,],[97,120,]),'property_def':([76,96,],[98,98,]),'method_def':([76,96,],[99,99,]),'type':([116,137,141,142,],[132,146,148,149,]),'block':([117,144,146,159,],[138,152,155,162,]),'loop_body':([144,],[151,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','kotlin_parser.py',21),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_multiple','kotlin_parser.py',25),
  ('statement_list -> statement','statement_list',1,'p_statement_list_single','kotlin_parser.py',30),
  ('statement_list -> <empty>','statement_list',0,'p_statement_list_empty','kotlin_parser.py',34),
  ('statement -> declaration','statement',1,'p_statement','kotlin_parser.py',38),
  ('statement -> function_def','statement',1,'p_statement','kotlin_parser.py',39),
  ('statement -> function_def_no_return','statement',1,'p_statement','kotlin_parser.py',40),
  ('statement -> class_def','statement',1,'p_statement','kotlin_parser.py',41),
  ('statement -> for_loop','statement',1,'p_statement','kotlin_parser.py',42),
  ('statement -> when_stmt','statement',1,'p_statement','kotlin_parser.py',43),
  ('statement -> print_stmt','statement',1,'p_statement','kotlin_parser.py',44),
  ('statement -> return_stmt','statement',1,'p_statement','kotlin_parser.py',45),
  ('statement -> expression_stmt','statement',1,'p_statement','kotlin_parser.py',46),
  ('declaration -> VAR ID ASSIGN expression','declaration',4,'p_declaration','kotlin_parser.py',58),
  ('declaration -> VAL ID ASSIGN expression','declaration',4,'p_declaration','kotlin_parser.py',59),
  ('function_def -> FUN ID LPAREN param_list_opt RPAREN COLON type block','function_def',8,'p_function_def','kotlin_parser.py',64),
  ('param_list_opt -> param_list','param_list_opt',1,'p_param_list_opt','kotlin_parser.py',68),
  ('param_list_opt -> <empty>','param_list_opt',0,'p_param_list_opt','kotlin_parser.py',69),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','kotlin_parser.py',73),
  ('param_list -> param','param_list',1,'p_param_list','kotlin_parser.py',74),
  ('param -> ID COLON type','param',3,'p_param','kotlin_parser.py',78),
  ('type -> TYPE_INT','type',1,'p_type','kotlin_parser.py',82),
  ('type -> TYPE_DOUBLE','type',1,'p_type','kotlin_parser.py',83),
  ('type -> TYPE_BOOLEAN','type',1,'p_type','kotlin_parser.py',84),
  ('type -> TYPE_STRING','type',1,'p_type','kotlin_parser.py',85),
  ('type -> ID','type',1,'p_type','kotlin_parser.py',86),
  ('return_stmt -> RETURN expression','return_stmt',2,'p_return_stmt','kotlin_parser.py',91),
  ('for_loop -> FOR LPAREN ID IN expression RPAREN loop_body','for_loop',7,'p_for_loop','kotlin_parser.py',96),
  ('loop_body -> block','loop_body',1,'p_loop_body','kotlin_parser.py',100),
  ('loop_body -> statement','loop_body',1,'p_loop_body','kotlin_parser.py',101),
  ('expression -> MAPOF LPAREN map_entries RPAREN','expression',4,'p_expression_map','kotlin_parser.py',106),
  ('map_entries -> map_entries COMMA map_entry','map_entries',3,'p_map_entries_multiple','kotlin_parser.py',110),
  ('map_entries -> map_entry','map_entries',1,'p_map_entries_single','kotlin_parser.py',114),
  ('map_entry -> expression TO expression','map_entry',3,'p_map_entry','kotlin_parser.py',118),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binary','kotlin_parser.py',124),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binary','kotlin_parser.py',125),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binary','kotlin_parser.py',126),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binary','kotlin_parser.py',127),
  ('expression -> expression LESS expression','expression',3,'p_expression_binary','kotlin_parser.py',128),
  ('expression -> expression GREATER expression','expression',3,'p_expression_binary','kotlin_parser.py',129),
  ('expression -> expression LESS_EQUAL expression','expression',3,'p_expression_binary','kotlin_parser.py',130),
  ('expression -> expression GREATER_EQUAL expression','expression',3,'p_expression_binary','kotlin_parser.py',131),
  ('expression -> expression EQUALS expression','expression',3,'p_expression_binary','kotlin_parser.py',132),
  ('expression -> expression NOT_EQUALS expression','expression',3,'p_expression_binary','kotlin_parser.py',133),
  ('expression -> expression AND expression','expression',3,'p_expression_binary','kotlin_parser.py',134),
  ('expression -> expression OR expression','expression',3,'p_expression_binary','kotlin_parser.py',135),
  ('expression -> MINUS expression','expression',2,'p_expression_unary','kotlin_parser.py',139),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','kotlin_parser.py',143),
  ('expression -> NUMBER_INT','expression',1,'p_expression_literal','kotlin_parser.py',147),
  ('expression -> NUMBER_DOUBLE','expression',1,'p_expression_literal','kotlin_parser.py',148),
  ('expression -> STRING','expression',1,'p_expression_literal','kotlin_parser.py',149),
  ('expression -> BOOLEAN_TRUE','expression',1,'p_expression_literal','kotlin_parser.py',150),
  ('expression -> BOOLEAN_FALSE','expression',1,'p_expression_literal','kotlin_parser.py',151),
  ('expression -> ID','expression',1,'p_expression_id','kotlin_parser.py',155),
  ('print_stmt -> PRINTLN LPAREN expression RPAREN','print_stmt',4,'p_print_stmt','kotlin_parser.py',160),
  ('print_stmt -> PRINT LPAREN expression RPAREN','print_stmt',4,'p_print_stmt_print','kotlin_parser.py',164),
  ('block -> LBRACE statement_list RBRACE','block',3,'p_block','kotlin_parser.py',169),
  ('expression_stmt -> expression','expression_stmt',1,'p_expression_stmt','kotlin_parser.py',174),
  ('expression -> LISTOF LPAREN expression_list RPAREN','expression',4,'p_expression_listOf','kotlin_parser.py',187),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list_multiple','kotlin_parser.py',191),
  ('expression_list -> expression','expression_list',1,'p_expression_list_single','kotlin_parser.py',196),
  ('expression_list -> <empty>','expression_list',0,'p_expression_list_empty','kotlin_parser.py',200),
  ('when_stmt -> WHEN LPAREN expression RPAREN LBRACE when_branches RBRACE','when_stmt',7,'p_when_stmt','kotlin_parser.py',206),
  ('when_branches -> when_branches when_branch','when_branches',2,'p_when_branches_multiple','kotlin_parser.py',210),
  ('when_branches -> when_branch','when_branches',1,'p_when_branches_single','kotlin_parser.py',215),
  ('when_branch -> expression ARROW statement_list','when_branch',3,'p_when_branch_expression','kotlin_parser.py',219),
  ('when_branch -> ELSE ARROW statement_list','when_branch',3,'p_when_branch_else','kotlin_parser.py',223),
  ('when_stmt -> WHEN LBRACE when_branches RBRACE','when_stmt',4,'p_when_stmt_without_expr','kotlin_parser.py',228),
  ('function_def_no_return -> FUN ID LPAREN param_list_opt RPAREN block','function_def_no_return',6,'p_function_def_no_return','kotlin_parser.py',233),
  ('class_def -> CLASS ID LBRACE class_body RBRACE','class_def',5,'p_class_def','kotlin_parser.py',242),
  ('class_body -> class_body class_member','class_body',2,'p_class_body_multiple','kotlin_parser.py',246),
  ('class_body -> class_member','class_body',1,'p_class_body_single','kotlin_parser.py',251),
  ('class_body -> <empty>','class_body',0,'p_class_body_empty','kotlin_parser.py',255),
  ('class_member -> property_def','class_member',1,'p_class_member','kotlin_parser.py',259),
  ('class_member -> method_def','class_member',1,'p_class_member','kotlin_parser.py',260),
  ('property_def -> VAR ID COLON type','property_def',4,'p_property_def','kotlin_parser.py',264),
  ('property_def -> VAL ID COLON type','property_def',4,'p_property_def','kotlin_parser.py',265),
  ('property_def -> VAR ID COLON type ASSIGN expression','property_def',6,'p_property_def','kotlin_parser.py',266),
  ('property_def -> VAL ID COLON type ASSIGN expression','property_def',6,'p_property_def','kotlin_parser.py',267),
  ('method_def -> FUN ID LPAREN param_list_opt RPAREN block','method_def',6,'p_method_def','kotlin_parser.py',274),
]
