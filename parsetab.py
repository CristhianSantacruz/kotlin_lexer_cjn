
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQUALSNOT_EQUALSleftLESSGREATERLESS_EQUALGREATER_EQUALleftPLUSMINUSleftMULTIPLYDIVIDErightUMINUSABSTRACT AND ARRAYOF ARROW ASSIGN BOOLEAN_FALSE BOOLEAN_TRUE BREAK CATCH CLASS COLON COMMA COMPANION CONSTRUCTOR CONTAINS CONTINUE CROSSINLINE DATA DIVIDE DOT ELSE ELVIS ENUM EQUALS EXTENDS FILTER FINAL FINALLY FOR FUN GREATER GREATER_EQUAL ID IF IMPLEMENTS IN INDICES INIT INLINE INNER INTERFACE INTERNAL LATEINIT LBRACE LBRACKET LESS LESS_EQUAL LISTOF LPAREN MAPOF MINUS MODULO MULTIPLY NOINLINE NOT_EQUALS NUMBER_DOUBLE NUMBER_INT OBJECT OPEN OR OUT OVERRIDE PLUS PRINT PRINTLN PRIVATE PROTECTED PUBLIC QUESTION RANGE RBRACE RBRACKET READLINE REIFIED RETURN RPAREN SEALED SEMICOLON STRING SUM SUPER THIS TO TRY TYPE_BOOLEAN TYPE_DOUBLE TYPE_INT TYPE_STRING VAL VAR WHEN WHILEprogram : statement_liststatement_list : statement_list statementstatement_list : statementstatement_list : statement : declaration\n                 | function_def\n                 | class_def\n                 | for_loop\n                 | when_stmt\n                 | print_stmt\n                 | return_stmt\n                 | break_stmt\n                 | continue_stmt\n                 | if_else\n                 | expression_stmtdeclaration : VAR ID ASSIGN expression\n                   | VAL ID ASSIGN expression\n                    | VAR ID COLON type ASSIGN expression\n                    | VAL ID COLON type ASSIGN expressionparam_list_opt : param_list\n                      | param_list : param_list COMMA param\n                  | paramparam : ID COLON typetype : TYPE_INT\n            | TYPE_DOUBLE\n            | TYPE_BOOLEAN\n            | TYPE_STRING\n            | IDreturn_stmt : RETURN expressionfor_loop : FOR LPAREN ID IN expression RPAREN loop_bodyloop_body : block\n                 | statementexpression : MAPOF LPAREN map_entries RPARENmap_entries : map_entries COMMA map_entrymap_entries : map_entrymap_entry : expression TO expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression MULTIPLY expression\n                  | expression DIVIDE expression\n                  | expression LESS expression\n                  | expression GREATER expression\n                  | expression LESS_EQUAL expression\n                  | expression GREATER_EQUAL expression\n                  | expression EQUALS expression\n                  | expression NOT_EQUALS expression\n                  | expression AND expression\n                  | expression OR expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBER_INT\n                  | NUMBER_DOUBLE\n                  | STRING\n                  | BOOLEAN_TRUE\n                  | BOOLEAN_FALSEexpression : IDprint_stmt : PRINTLN LPAREN expression RPARENprint_stmt : PRINT LPAREN expression RPARENblock : LBRACE statement_list RBRACEexpression_stmt : expressionexpression : LISTOF LPAREN expression_list RPARENexpression_list : expression_list COMMA expressionexpression_list : expressionexpression_list : when_stmt : WHEN LPAREN expression RPAREN LBRACE when_branches RBRACEwhen_branches : when_branches when_branchwhen_branches : when_branchwhen_branch : expression ARROW statement_listwhen_branch : ELSE ARROW statement_listwhen_stmt : WHEN LBRACE when_branches RBRACEwhen_branch : expression blockwhen_branch : ELSE blockclass_def : CLASS ID LBRACE class_body RBRACEclass_body : class_body class_memberclass_body : class_memberclass_body : class_member : property_def\n                    | method_defproperty_def : VAR ID COLON type\n                    | VAL ID COLON type\n                    | VAR ID COLON type ASSIGN expression\n                    | VAL ID COLON type ASSIGN expressionmethod_def : FUN ID LPAREN param_list_opt RPAREN blockfunction_def : FUN ID LPAREN param_list_opt RPAREN COLON type block\n                    | FUN ID LPAREN param_list_opt RPAREN blockbreak_stmt : BREAKcontinue_stmt : CONTINUEexpression : ARRAYOF LPAREN expression_list RPARENif_else : IF LPAREN expression RPAREN block ELSE blockexpression : READLINE LPAREN RPAREN'
    
_lr_action_items = {'VAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,32,33,34,35,36,40,63,66,72,73,74,75,76,77,78,79,80,81,82,83,87,88,104,105,106,108,109,110,111,112,118,119,120,121,127,129,131,132,134,135,137,140,142,148,149,155,156,157,162,163,166,171,173,176,177,179,180,181,182,183,184,188,189,190,],[15,15,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-57,-61,-87,-88,-52,-53,-54,-55,-56,-2,-30,-50,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,122,-91,-16,-29,-25,-26,-27,-28,-17,122,-76,-78,-79,-71,15,15,15,-58,-59,-34,-62,-89,-74,-75,15,15,15,-18,-19,-86,15,-60,-80,-81,-31,-32,-33,-66,-90,-85,-82,-83,-84,]),'VAL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,32,33,34,35,36,40,63,66,72,73,74,75,76,77,78,79,80,81,82,83,87,88,104,105,106,108,109,110,111,112,118,119,120,121,127,129,131,132,134,135,137,140,142,148,149,155,156,157,162,163,166,171,173,176,177,179,180,181,182,183,184,188,189,190,],[18,18,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-57,-61,-87,-88,-52,-53,-54,-55,-56,-2,-30,-50,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,123,-91,-16,-29,-25,-26,-27,-28,-17,123,-76,-78,-79,-71,18,18,18,-58,-59,-34,-62,-89,-74,-75,18,18,18,-18,-19,-86,18,-60,-80,-81,-31,-32,-33,-66,-90,-85,-82,-83,-84,]),'FUN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,32,33,34,35,36,40,63,66,72,73,74,75,76,77,78,79,80,81,82,83,87,88,104,105,106,108,109,110,111,112,118,119,120,121,127,129,131,132,134,135,137,140,142,148,149,155,156,157,162,163,166,171,173,176,177,179,180,181,182,183,184,188,189,190,],[19,19,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-57,-61,-87,-88,-52,-53,-54,-55,-56,-2,-30,-50,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,124,-91,-16,-29,-25,-26,-27,-28,-17,124,-76,-78,-79,-71,19,19,19,-58,-59,-34,-62,-89,-74,-75,19,19,19,-18,-19,-86,19,-60,-80,-81,-31,-32,-33,-66,-90,-85,-82,-83,-84,]),'CLASS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,32,33,34,35,36,40,63,66,72,73,74,75,76,77,78,79,80,81,82,83,87,104,105,112,127,129,131,132,134,135,137,140,142,148,155,156,157,162,163,166,171,173,179,180,181,182,183,184,],[21,21,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-57,-61,-87,-88,-52,-53,-54,-55,-56,-2,-30,-50,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,-91,-16,-17,-71,21,21,21,-58,-59,-34,-62,-89,-74,21,21,21,-18,-19,-86,21,-60,-31,-32,-33,-66,-90,-85,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,32,33,34,35,36,40,63,66,72,73,74,75,76,77,78,79,80,81,82,83,87,104,105,112,127,129,131,132,134,135,137,140,142,148,155,156,157,162,163,166,171,173,179,180,181,182,183,184,],[22,22,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-57,-61,-87,-88,-52,-53,-54,-55,-56,-2,-30,-50,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,-91,-16,-17,-71,22,22,22,-58,-59,-34,-62,-89,-74,22,22,22,-18,-19,-86,22,-60,-31,-32,-33,-66,-90,-85,]),'WHEN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,32,33,34,35,36,40,63,66,72,73,74,75,76,77,78,79,80,81,82,83,87,104,105,112,127,129,131,132,134,135,137,140,142,148,155,156,157,162,163,166,171,173,179,180,181,182,183,184,],[23,23,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-57,-61,-87,-88,-52,-53,-54,-55,-56,-2,-30,-50,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,-91,-16,-17,-71,23,23,23,-58,-59,-34,-62,-89,-74,23,23,23,-18,-19,-86,23,-60,-31,-32,-33,-66,-90,-85,]),'PRINTLN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,32,33,34,35,36,40,63,66,72,73,74,75,76,77,78,79,80,81,82,83,87,104,105,112,127,129,131,132,134,135,137,140,142,148,155,156,157,162,163,166,171,173,179,180,181,182,183,184,],[24,24,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-57,-61,-87,-88,-52,-53,-54,-55,-56,-2,-30,-50,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,-91,-16,-17,-71,24,24,24,-58,-59,-34,-62,-89,-74,24,24,24,-18,-19,-86,24,-60,-31,-32,-33,-66,-90,-85,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,32,33,34,35,36,40,63,66,72,73,74,75,76,77,78,79,80,81,82,83,87,104,105,112,127,129,131,132,134,135,137,140,142,148,155,156,157,162,163,166,171,173,179,180,181,182,183,184,],[25,25,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-57,-61,-87,-88,-52,-53,-54,-55,-56,-2,-30,-50,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,-91,-16,-17,-71,25,25,25,-58,-59,-34,-62,-89,-74,25,25,25,-18,-19,-86,25,-60,-31,-32,-33,-66,-90,-85,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,32,33,34,35,36,40,63,66,72,73,74,75,76,77,78,79,80,81,82,83,87,104,105,112,127,129,131,132,134,135,137,140,142,148,155,156,157,162,163,166,171,173,179,180,181,182,183,184,],[26,26,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-57,-61,-87,-88,-52,-53,-54,-55,-56,-2,-30,-50,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,-91,-16,-17,-71,26,26,26,-58,-59,-34,-62,-89,-74,26,26,26,-18,-19,-86,26,-60,-31,-32,-33,-66,-90,-85,]),'BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,32,33,34,35,36,40,63,66,72,73,74,75,76,77,78,79,80,81,82,83,87,104,105,112,127,129,131,132,134,135,137,140,142,148,155,156,157,162,163,166,171,173,179,180,181,182,183,184,],[27,27,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-57,-61,-87,-88,-52,-53,-54,-55,-56,-2,-30,-50,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,-91,-16,-17,-71,27,27,27,-58,-59,-34,-62,-89,-74,27,27,27,-18,-19,-86,27,-60,-31,-32,-33,-66,-90,-85,]),'CONTINUE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,32,33,34,35,36,40,63,66,72,73,74,75,76,77,78,79,80,81,82,83,87,104,105,112,127,129,131,132,134,135,137,140,142,148,155,156,157,162,163,166,171,173,179,180,181,182,183,184,],[28,28,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-57,-61,-87,-88,-52,-53,-54,-55,-56,-2,-30,-50,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,-91,-16,-17,-71,28,28,28,-58,-59,-34,-62,-89,-74,28,28,28,-18,-19,-86,28,-60,-31,-32,-33,-66,-90,-85,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,32,33,34,35,36,40,63,66,72,73,74,75,76,77,78,79,80,81,82,83,87,104,105,112,127,129,131,132,134,135,137,140,142,148,155,156,157,162,163,166,171,173,179,180,181,182,183,184,],[29,29,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-57,-61,-87,-88,-52,-53,-54,-55,-56,-2,-30,-50,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,-91,-16,-17,-71,29,29,29,-58,-59,-34,-62,-89,-74,29,29,29,-18,-19,-86,29,-60,-31,-32,-33,-66,-90,-85,]),'MAPOF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,20,26,27,28,31,32,33,34,35,36,40,42,43,44,45,46,47,48,49,50,51,52,53,59,60,61,62,63,64,65,66,67,68,70,72,73,74,75,76,77,78,79,80,81,82,83,84,87,91,92,104,105,112,125,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,148,154,155,156,157,162,163,166,171,172,173,179,180,181,182,183,184,185,186,],[30,30,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-57,-61,30,30,-87,-88,30,-52,-53,-54,-55,-56,-2,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-30,30,30,-50,30,30,30,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,30,-51,30,-68,-91,-16,-17,30,-71,-67,30,-72,30,30,-73,-58,-59,-34,30,30,-62,30,-89,30,30,-74,30,30,30,30,-18,-19,-86,30,30,-60,-31,-32,-33,-66,-90,-85,30,30,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,20,26,27,28,31,32,33,34,35,36,40,42,43,44,45,46,47,48,49,50,51,52,53,56,59,60,61,62,63,64,65,66,67,68,70,72,73,74,75,76,77,78,79,80,81,82,83,84,87,90,91,92,93,95,96,97,100,102,104,105,112,125,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,148,153,154,155,156,157,160,161,162,163,166,171,172,173,179,180,181,182,183,184,185,186,188,189,],[31,31,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-57,43,31,31,-87,-88,31,-52,-53,-54,-55,-56,-2,31,31,31,31,31,31,31,31,31,31,31,31,43,31,31,31,31,43,31,31,-50,31,31,31,-38,-39,-40,-41,43,43,43,43,43,43,43,43,31,-51,43,31,-68,43,43,43,43,43,43,-91,43,43,31,-71,-67,31,-72,31,31,-73,-58,-59,-34,31,31,-62,31,-89,31,31,-74,43,31,31,31,31,43,43,43,43,-86,31,31,-60,-31,-32,-33,-66,-90,-85,31,31,43,43,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,55,59,60,61,62,63,64,65,66,67,68,70,72,73,74,75,76,77,78,79,80,81,82,83,84,87,91,92,104,105,112,125,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,148,152,154,155,156,157,162,163,166,171,172,173,179,180,181,182,183,184,185,186,],[20,20,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-57,-61,20,58,59,61,62,20,-87,-88,64,65,20,-52,-53,-54,-55,-56,67,68,69,-2,20,20,20,20,20,20,20,20,20,20,20,20,86,20,20,20,20,-30,20,20,-50,20,20,20,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,20,-51,20,-68,-91,-16,-17,20,-71,-67,20,-72,20,20,-73,-58,-59,-34,20,20,-62,20,-89,20,20,-74,170,20,20,20,20,-18,-19,-86,20,20,-60,-31,-32,-33,-66,-90,-85,20,20,]),'NUMBER_INT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,20,26,27,28,31,32,33,34,35,36,40,42,43,44,45,46,47,48,49,50,51,52,53,59,60,61,62,63,64,65,66,67,68,70,72,73,74,75,76,77,78,79,80,81,82,83,84,87,91,92,104,105,112,125,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,148,154,155,156,157,162,163,166,171,172,173,179,180,181,182,183,184,185,186,],[32,32,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-57,-61,32,32,-87,-88,32,-52,-53,-54,-55,-56,-2,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-30,32,32,-50,32,32,32,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,32,-51,32,-68,-91,-16,-17,32,-71,-67,32,-72,32,32,-73,-58,-59,-34,32,32,-62,32,-89,32,32,-74,32,32,32,32,-18,-19,-86,32,32,-60,-31,-32,-33,-66,-90,-85,32,32,]),'NUMBER_DOUBLE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,20,26,27,28,31,32,33,34,35,36,40,42,43,44,45,46,47,48,49,50,51,52,53,59,60,61,62,63,64,65,66,67,68,70,72,73,74,75,76,77,78,79,80,81,82,83,84,87,91,92,104,105,112,125,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,148,154,155,156,157,162,163,166,171,172,173,179,180,181,182,183,184,185,186,],[33,33,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-57,-61,33,33,-87,-88,33,-52,-53,-54,-55,-56,-2,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-30,33,33,-50,33,33,33,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,33,-51,33,-68,-91,-16,-17,33,-71,-67,33,-72,33,33,-73,-58,-59,-34,33,33,-62,33,-89,33,33,-74,33,33,33,33,-18,-19,-86,33,33,-60,-31,-32,-33,-66,-90,-85,33,33,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,20,26,27,28,31,32,33,34,35,36,40,42,43,44,45,46,47,48,49,50,51,52,53,59,60,61,62,63,64,65,66,67,68,70,72,73,74,75,76,77,78,79,80,81,82,83,84,87,91,92,104,105,112,125,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,148,154,155,156,157,162,163,166,171,172,173,179,180,181,182,183,184,185,186,],[34,34,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-57,-61,34,34,-87,-88,34,-52,-53,-54,-55,-56,-2,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-30,34,34,-50,34,34,34,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,34,-51,34,-68,-91,-16,-17,34,-71,-67,34,-72,34,34,-73,-58,-59,-34,34,34,-62,34,-89,34,34,-74,34,34,34,34,-18,-19,-86,34,34,-60,-31,-32,-33,-66,-90,-85,34,34,]),'BOOLEAN_TRUE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,20,26,27,28,31,32,33,34,35,36,40,42,43,44,45,46,47,48,49,50,51,52,53,59,60,61,62,63,64,65,66,67,68,70,72,73,74,75,76,77,78,79,80,81,82,83,84,87,91,92,104,105,112,125,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,148,154,155,156,157,162,163,166,171,172,173,179,180,181,182,183,184,185,186,],[35,35,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-57,-61,35,35,-87,-88,35,-52,-53,-54,-55,-56,-2,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-30,35,35,-50,35,35,35,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,35,-51,35,-68,-91,-16,-17,35,-71,-67,35,-72,35,35,-73,-58,-59,-34,35,35,-62,35,-89,35,35,-74,35,35,35,35,-18,-19,-86,35,35,-60,-31,-32,-33,-66,-90,-85,35,35,]),'BOOLEAN_FALSE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,20,26,27,28,31,32,33,34,35,36,40,42,43,44,45,46,47,48,49,50,51,52,53,59,60,61,62,63,64,65,66,67,68,70,72,73,74,75,76,77,78,79,80,81,82,83,84,87,91,92,104,105,112,125,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,148,154,155,156,157,162,163,166,171,172,173,179,180,181,182,183,184,185,186,],[36,36,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-57,-61,36,36,-87,-88,36,-52,-53,-54,-55,-56,-2,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-30,36,36,-50,36,36,36,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,36,-51,36,-68,-91,-16,-17,36,-71,-67,36,-72,36,36,-73,-58,-59,-34,36,36,-62,36,-89,36,36,-74,36,36,36,36,-18,-19,-86,36,36,-60,-31,-32,-33,-66,-90,-85,36,36,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,26,27,28,31,32,33,34,35,36,40,42,43,44,45,46,47,48,49,50,51,52,53,58,59,60,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,92,104,105,112,122,123,124,125,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,147,148,154,155,156,157,162,163,165,166,168,169,170,171,172,173,179,180,181,182,183,184,185,186,],[16,16,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,41,-57,-61,54,55,16,57,16,-87,-88,16,-52,-53,-54,-55,-56,-2,16,16,16,16,16,16,16,16,16,16,16,16,89,16,16,16,16,-30,16,16,-50,16,16,16,106,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,16,106,114,-51,16,-68,-91,-16,-17,150,151,152,16,-71,-67,16,-72,16,16,-73,-58,-59,-34,16,16,-62,16,-89,16,16,106,114,-74,16,16,16,16,-18,-19,106,-86,106,106,114,16,16,-60,-31,-32,-33,-66,-90,-85,16,16,]),'LISTOF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,20,26,27,28,31,32,33,34,35,36,40,42,43,44,45,46,47,48,49,50,51,52,53,59,60,61,62,63,64,65,66,67,68,70,72,73,74,75,76,77,78,79,80,81,82,83,84,87,91,92,104,105,112,125,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,148,154,155,156,157,162,163,166,171,172,173,179,180,181,182,183,184,185,186,],[37,37,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-57,-61,37,37,-87,-88,37,-52,-53,-54,-55,-56,-2,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-30,37,37,-50,37,37,37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,37,-51,37,-68,-91,-16,-17,37,-71,-67,37,-72,37,37,-73,-58,-59,-34,37,37,-62,37,-89,37,37,-74,37,37,37,37,-18,-19,-86,37,37,-60,-31,-32,-33,-66,-90,-85,37,37,]),'ARRAYOF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,20,26,27,28,31,32,33,34,35,36,40,42,43,44,45,46,47,48,49,50,51,52,53,59,60,61,62,63,64,65,66,67,68,70,72,73,74,75,76,77,78,79,80,81,82,83,84,87,91,92,104,105,112,125,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,148,154,155,156,157,162,163,166,171,172,173,179,180,181,182,183,184,185,186,],[38,38,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-57,-61,38,38,-87,-88,38,-52,-53,-54,-55,-56,-2,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-30,38,38,-50,38,38,38,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,38,-51,38,-68,-91,-16,-17,38,-71,-67,38,-72,38,38,-73,-58,-59,-34,38,38,-62,38,-89,38,38,-74,38,38,38,38,-18,-19,-86,38,38,-60,-31,-32,-33,-66,-90,-85,38,38,]),'READLINE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,20,26,27,28,31,32,33,34,35,36,40,42,43,44,45,46,47,48,49,50,51,52,53,59,60,61,62,63,64,65,66,67,68,70,72,73,74,75,76,77,78,79,80,81,82,83,84,87,91,92,104,105,112,125,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,148,154,155,156,157,162,163,166,171,172,173,179,180,181,182,183,184,185,186,],[39,39,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-57,-61,39,39,-87,-88,39,-52,-53,-54,-55,-56,-2,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-30,39,39,-50,39,39,39,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,39,-51,39,-68,-91,-16,-17,39,-71,-67,39,-72,39,39,-73,-58,-59,-34,39,39,-62,39,-89,39,39,-74,39,39,39,39,-18,-19,-86,39,39,-60,-31,-32,-33,-66,-90,-85,39,39,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,32,33,34,35,36,40,63,66,72,73,74,75,76,77,78,79,80,81,82,83,87,104,105,112,127,134,135,137,140,142,148,162,163,166,173,179,180,181,182,183,184,],[-4,0,-1,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-57,-61,-87,-88,-52,-53,-54,-55,-56,-2,-30,-50,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,-91,-16,-17,-71,-58,-59,-34,-62,-89,-74,-18,-19,-86,-60,-31,-32,-33,-66,-90,-85,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,32,33,34,35,36,40,63,66,72,73,74,75,76,77,78,79,80,81,82,83,87,88,91,92,104,105,106,108,109,110,111,112,118,119,120,121,127,128,129,130,131,132,133,134,135,137,140,142,148,149,155,156,157,162,163,166,172,173,176,177,179,180,181,182,183,184,188,189,190,],[-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-57,-61,-87,-88,-52,-53,-54,-55,-56,-2,-30,-50,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,-77,127,-68,-91,-16,-29,-25,-26,-27,-28,-17,148,-76,-78,-79,-71,-67,-4,-72,-4,-4,-73,-58,-59,-34,-62,-89,-74,-75,-69,173,-70,-18,-19,-86,182,-60,-80,-81,-31,-32,-33,-66,-90,-85,-82,-83,-84,]),'ELSE':([3,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,32,33,34,35,36,40,60,63,66,72,73,74,75,76,77,78,79,80,81,82,83,87,91,92,104,105,112,127,128,129,130,132,133,134,135,137,140,142,148,154,155,157,158,162,163,166,172,173,179,180,181,182,183,184,],[-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-57,-61,-87,-88,-52,-53,-54,-55,-56,-2,94,-30,-50,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,94,-68,-91,-16,-17,-71,-67,-4,-72,-4,-73,-58,-59,-34,-62,-89,-74,94,-69,-70,174,-18,-19,-86,94,-60,-31,-32,-33,-66,-90,-85,]),'PLUS':([16,17,32,33,34,35,36,56,63,66,72,73,74,75,76,77,78,79,80,81,82,83,87,90,93,95,96,97,100,102,104,105,112,137,140,142,153,160,161,162,163,188,189,],[-57,42,-52,-53,-54,-55,-56,42,42,-50,-38,-39,-40,-41,42,42,42,42,42,42,42,42,-51,42,42,42,42,42,42,42,-91,42,42,-34,-62,-89,42,42,42,42,42,42,42,]),'MULTIPLY':([16,17,32,33,34,35,36,56,63,66,72,73,74,75,76,77,78,79,80,81,82,83,87,90,93,95,96,97,100,102,104,105,112,137,140,142,153,160,161,162,163,188,189,],[-57,44,-52,-53,-54,-55,-56,44,44,-50,44,44,-40,-41,44,44,44,44,44,44,44,44,-51,44,44,44,44,44,44,44,-91,44,44,-34,-62,-89,44,44,44,44,44,44,44,]),'DIVIDE':([16,17,32,33,34,35,36,56,63,66,72,73,74,75,76,77,78,79,80,81,82,83,87,90,93,95,96,97,100,102,104,105,112,137,140,142,153,160,161,162,163,188,189,],[-57,45,-52,-53,-54,-55,-56,45,45,-50,45,45,-40,-41,45,45,45,45,45,45,45,45,-51,45,45,45,45,45,45,45,-91,45,45,-34,-62,-89,45,45,45,45,45,45,45,]),'LESS':([16,17,32,33,34,35,36,56,63,66,72,73,74,75,76,77,78,79,80,81,82,83,87,90,93,95,96,97,100,102,104,105,112,137,140,142,153,160,161,162,163,188,189,],[-57,46,-52,-53,-54,-55,-56,46,46,-50,-38,-39,-40,-41,-42,-43,-44,-45,46,46,46,46,-51,46,46,46,46,46,46,46,-91,46,46,-34,-62,-89,46,46,46,46,46,46,46,]),'GREATER':([16,17,32,33,34,35,36,56,63,66,72,73,74,75,76,77,78,79,80,81,82,83,87,90,93,95,96,97,100,102,104,105,112,137,140,142,153,160,161,162,163,188,189,],[-57,47,-52,-53,-54,-55,-56,47,47,-50,-38,-39,-40,-41,-42,-43,-44,-45,47,47,47,47,-51,47,47,47,47,47,47,47,-91,47,47,-34,-62,-89,47,47,47,47,47,47,47,]),'LESS_EQUAL':([16,17,32,33,34,35,36,56,63,66,72,73,74,75,76,77,78,79,80,81,82,83,87,90,93,95,96,97,100,102,104,105,112,137,140,142,153,160,161,162,163,188,189,],[-57,48,-52,-53,-54,-55,-56,48,48,-50,-38,-39,-40,-41,-42,-43,-44,-45,48,48,48,48,-51,48,48,48,48,48,48,48,-91,48,48,-34,-62,-89,48,48,48,48,48,48,48,]),'GREATER_EQUAL':([16,17,32,33,34,35,36,56,63,66,72,73,74,75,76,77,78,79,80,81,82,83,87,90,93,95,96,97,100,102,104,105,112,137,140,142,153,160,161,162,163,188,189,],[-57,49,-52,-53,-54,-55,-56,49,49,-50,-38,-39,-40,-41,-42,-43,-44,-45,49,49,49,49,-51,49,49,49,49,49,49,49,-91,49,49,-34,-62,-89,49,49,49,49,49,49,49,]),'EQUALS':([16,17,32,33,34,35,36,56,63,66,72,73,74,75,76,77,78,79,80,81,82,83,87,90,93,95,96,97,100,102,104,105,112,137,140,142,153,160,161,162,163,188,189,],[-57,50,-52,-53,-54,-55,-56,50,50,-50,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,50,50,-51,50,50,50,50,50,50,50,-91,50,50,-34,-62,-89,50,50,50,50,50,50,50,]),'NOT_EQUALS':([16,17,32,33,34,35,36,56,63,66,72,73,74,75,76,77,78,79,80,81,82,83,87,90,93,95,96,97,100,102,104,105,112,137,140,142,153,160,161,162,163,188,189,],[-57,51,-52,-53,-54,-55,-56,51,51,-50,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,51,51,-51,51,51,51,51,51,51,51,-91,51,51,-34,-62,-89,51,51,51,51,51,51,51,]),'AND':([16,17,32,33,34,35,36,56,63,66,72,73,74,75,76,77,78,79,80,81,82,83,87,90,93,95,96,97,100,102,104,105,112,137,140,142,153,160,161,162,163,188,189,],[-57,52,-52,-53,-54,-55,-56,52,52,-50,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,52,-51,52,52,52,52,52,52,52,-91,52,52,-34,-62,-89,52,52,52,52,52,52,52,]),'OR':([16,17,32,33,34,35,36,56,63,66,72,73,74,75,76,77,78,79,80,81,82,83,87,90,93,95,96,97,100,102,104,105,112,137,140,142,153,160,161,162,163,188,189,],[-57,53,-52,-53,-54,-55,-56,53,53,-50,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,53,53,53,53,53,53,53,-91,53,53,-34,-62,-89,53,53,53,53,53,53,53,]),'RPAREN':([16,32,33,34,35,36,56,66,67,68,69,72,73,74,75,76,77,78,79,80,81,82,83,86,87,90,95,96,97,98,99,101,102,103,104,106,108,109,110,111,115,116,117,137,140,142,153,159,160,161,164,167,170,178,],[-57,-52,-53,-54,-55,-56,87,-50,-65,-65,104,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-21,-51,126,134,135,136,137,-36,140,-64,142,-91,-29,-25,-26,-27,-28,146,-20,-23,-34,-62,-89,171,-35,-37,-63,-24,-22,-21,187,]),'ARROW':([16,32,33,34,35,36,66,72,73,74,75,76,77,78,79,80,81,82,83,87,93,94,104,137,140,142,],[-57,-52,-53,-54,-55,-56,-50,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,129,132,-91,-34,-62,-89,]),'LBRACE':([16,23,32,33,34,35,36,57,66,72,73,74,75,76,77,78,79,80,81,82,83,87,93,94,104,106,108,109,110,111,126,136,137,140,142,146,171,174,175,187,],[-57,60,-52,-53,-54,-55,-56,88,-50,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,131,131,-91,-29,-25,-26,-27,-28,154,131,-34,-62,-89,131,131,131,131,131,]),'TO':([16,32,33,34,35,36,66,72,73,74,75,76,77,78,79,80,81,82,83,87,100,104,137,140,142,],[-57,-52,-53,-54,-55,-56,-50,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,139,-91,-34,-62,-89,]),'COMMA':([16,32,33,34,35,36,66,67,68,72,73,74,75,76,77,78,79,80,81,82,83,87,98,99,101,102,103,104,106,108,109,110,111,116,117,137,140,142,159,160,161,164,167,],[-57,-52,-53,-54,-55,-56,-50,-65,-65,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,138,-36,141,-64,141,-91,-29,-25,-26,-27,-28,147,-23,-34,-62,-89,-35,-37,-63,-24,-22,]),'ASSIGN':([41,54,106,107,108,109,110,111,113,176,177,],[70,84,-29,143,-25,-26,-27,-28,144,185,186,]),'COLON':([41,54,114,146,150,151,],[71,85,145,165,168,169,]),'TYPE_INT':([71,85,145,165,168,169,],[108,108,108,108,108,108,]),'TYPE_DOUBLE':([71,85,145,165,168,169,],[109,109,109,109,109,109,]),'TYPE_BOOLEAN':([71,85,145,165,168,169,],[110,110,110,110,110,110,]),'TYPE_STRING':([71,85,145,165,168,169,],[111,111,111,111,111,111,]),'IN':([89,],[125,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,129,131,132,],[2,155,156,157,]),'statement':([0,2,129,131,132,155,156,157,171,],[3,40,3,3,3,40,40,40,181,]),'declaration':([0,2,129,131,132,155,156,157,171,],[4,4,4,4,4,4,4,4,4,]),'function_def':([0,2,129,131,132,155,156,157,171,],[5,5,5,5,5,5,5,5,5,]),'class_def':([0,2,129,131,132,155,156,157,171,],[6,6,6,6,6,6,6,6,6,]),'for_loop':([0,2,129,131,132,155,156,157,171,],[7,7,7,7,7,7,7,7,7,]),'when_stmt':([0,2,129,131,132,155,156,157,171,],[8,8,8,8,8,8,8,8,8,]),'print_stmt':([0,2,129,131,132,155,156,157,171,],[9,9,9,9,9,9,9,9,9,]),'return_stmt':([0,2,129,131,132,155,156,157,171,],[10,10,10,10,10,10,10,10,10,]),'break_stmt':([0,2,129,131,132,155,156,157,171,],[11,11,11,11,11,11,11,11,11,]),'continue_stmt':([0,2,129,131,132,155,156,157,171,],[12,12,12,12,12,12,12,12,12,]),'if_else':([0,2,129,131,132,155,156,157,171,],[13,13,13,13,13,13,13,13,13,]),'expression_stmt':([0,2,129,131,132,155,156,157,171,],[14,14,14,14,14,14,14,14,14,]),'expression':([0,2,20,26,31,42,43,44,45,46,47,48,49,50,51,52,53,59,60,61,62,64,65,67,68,70,84,91,125,129,131,132,138,139,141,143,144,154,155,156,157,171,172,185,186,],[17,17,56,63,66,72,73,74,75,76,77,78,79,80,81,82,83,90,93,95,96,97,100,102,102,105,112,93,153,17,17,17,100,160,161,162,163,93,17,17,17,17,93,188,189,]),'when_branches':([60,154,],[91,172,]),'when_branch':([60,91,154,172,],[92,128,92,128,]),'map_entries':([65,],[98,]),'map_entry':([65,138,],[99,159,]),'expression_list':([67,68,],[101,103,]),'type':([71,85,145,165,168,169,],[107,113,164,175,176,177,]),'param_list_opt':([86,170,],[115,178,]),'param_list':([86,170,],[116,116,]),'param':([86,147,170,],[117,167,117,]),'class_body':([88,],[118,]),'class_member':([88,118,],[119,149,]),'property_def':([88,118,],[120,120,]),'method_def':([88,118,],[121,121,]),'block':([93,94,136,146,171,174,175,187,],[130,133,158,166,180,183,184,190,]),'loop_body':([171,],[179,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','kotlin_parser.py',71),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_multiple','kotlin_parser.py',75),
  ('statement_list -> statement','statement_list',1,'p_statement_list_single','kotlin_parser.py',80),
  ('statement_list -> <empty>','statement_list',0,'p_statement_list_empty','kotlin_parser.py',84),
  ('statement -> declaration','statement',1,'p_statement','kotlin_parser.py',88),
  ('statement -> function_def','statement',1,'p_statement','kotlin_parser.py',89),
  ('statement -> class_def','statement',1,'p_statement','kotlin_parser.py',90),
  ('statement -> for_loop','statement',1,'p_statement','kotlin_parser.py',91),
  ('statement -> when_stmt','statement',1,'p_statement','kotlin_parser.py',92),
  ('statement -> print_stmt','statement',1,'p_statement','kotlin_parser.py',93),
  ('statement -> return_stmt','statement',1,'p_statement','kotlin_parser.py',94),
  ('statement -> break_stmt','statement',1,'p_statement','kotlin_parser.py',95),
  ('statement -> continue_stmt','statement',1,'p_statement','kotlin_parser.py',96),
  ('statement -> if_else','statement',1,'p_statement','kotlin_parser.py',97),
  ('statement -> expression_stmt','statement',1,'p_statement','kotlin_parser.py',98),
  ('declaration -> VAR ID ASSIGN expression','declaration',4,'p_declaration','kotlin_parser.py',111),
  ('declaration -> VAL ID ASSIGN expression','declaration',4,'p_declaration','kotlin_parser.py',112),
  ('declaration -> VAR ID COLON type ASSIGN expression','declaration',6,'p_declaration','kotlin_parser.py',113),
  ('declaration -> VAL ID COLON type ASSIGN expression','declaration',6,'p_declaration','kotlin_parser.py',114),
  ('param_list_opt -> param_list','param_list_opt',1,'p_param_list_opt','kotlin_parser.py',128),
  ('param_list_opt -> <empty>','param_list_opt',0,'p_param_list_opt','kotlin_parser.py',129),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','kotlin_parser.py',133),
  ('param_list -> param','param_list',1,'p_param_list','kotlin_parser.py',134),
  ('param -> ID COLON type','param',3,'p_param','kotlin_parser.py',138),
  ('type -> TYPE_INT','type',1,'p_type','kotlin_parser.py',142),
  ('type -> TYPE_DOUBLE','type',1,'p_type','kotlin_parser.py',143),
  ('type -> TYPE_BOOLEAN','type',1,'p_type','kotlin_parser.py',144),
  ('type -> TYPE_STRING','type',1,'p_type','kotlin_parser.py',145),
  ('type -> ID','type',1,'p_type','kotlin_parser.py',146),
  ('return_stmt -> RETURN expression','return_stmt',2,'p_return_stmt','kotlin_parser.py',151),
  ('for_loop -> FOR LPAREN ID IN expression RPAREN loop_body','for_loop',7,'p_for_loop','kotlin_parser.py',156),
  ('loop_body -> block','loop_body',1,'p_loop_body','kotlin_parser.py',160),
  ('loop_body -> statement','loop_body',1,'p_loop_body','kotlin_parser.py',161),
  ('expression -> MAPOF LPAREN map_entries RPAREN','expression',4,'p_expression_map','kotlin_parser.py',166),
  ('map_entries -> map_entries COMMA map_entry','map_entries',3,'p_map_entries_multiple','kotlin_parser.py',170),
  ('map_entries -> map_entry','map_entries',1,'p_map_entries_single','kotlin_parser.py',174),
  ('map_entry -> expression TO expression','map_entry',3,'p_map_entry','kotlin_parser.py',178),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binary','kotlin_parser.py',251),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binary','kotlin_parser.py',252),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binary','kotlin_parser.py',253),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binary','kotlin_parser.py',254),
  ('expression -> expression LESS expression','expression',3,'p_expression_binary','kotlin_parser.py',255),
  ('expression -> expression GREATER expression','expression',3,'p_expression_binary','kotlin_parser.py',256),
  ('expression -> expression LESS_EQUAL expression','expression',3,'p_expression_binary','kotlin_parser.py',257),
  ('expression -> expression GREATER_EQUAL expression','expression',3,'p_expression_binary','kotlin_parser.py',258),
  ('expression -> expression EQUALS expression','expression',3,'p_expression_binary','kotlin_parser.py',259),
  ('expression -> expression NOT_EQUALS expression','expression',3,'p_expression_binary','kotlin_parser.py',260),
  ('expression -> expression AND expression','expression',3,'p_expression_binary','kotlin_parser.py',261),
  ('expression -> expression OR expression','expression',3,'p_expression_binary','kotlin_parser.py',262),
  ('expression -> MINUS expression','expression',2,'p_expression_unary','kotlin_parser.py',270),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','kotlin_parser.py',274),
  ('expression -> NUMBER_INT','expression',1,'p_expression_literal','kotlin_parser.py',278),
  ('expression -> NUMBER_DOUBLE','expression',1,'p_expression_literal','kotlin_parser.py',279),
  ('expression -> STRING','expression',1,'p_expression_literal','kotlin_parser.py',280),
  ('expression -> BOOLEAN_TRUE','expression',1,'p_expression_literal','kotlin_parser.py',281),
  ('expression -> BOOLEAN_FALSE','expression',1,'p_expression_literal','kotlin_parser.py',282),
  ('expression -> ID','expression',1,'p_expression_id','kotlin_parser.py',298),
  ('print_stmt -> PRINTLN LPAREN expression RPAREN','print_stmt',4,'p_print_stmt','kotlin_parser.py',306),
  ('print_stmt -> PRINT LPAREN expression RPAREN','print_stmt',4,'p_print_stmt_print','kotlin_parser.py',310),
  ('block -> LBRACE statement_list RBRACE','block',3,'p_block','kotlin_parser.py',315),
  ('expression_stmt -> expression','expression_stmt',1,'p_expression_stmt','kotlin_parser.py',320),
  ('expression -> LISTOF LPAREN expression_list RPAREN','expression',4,'p_expression_listOf','kotlin_parser.py',333),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list_multiple','kotlin_parser.py',338),
  ('expression_list -> expression','expression_list',1,'p_expression_list_single','kotlin_parser.py',343),
  ('expression_list -> <empty>','expression_list',0,'p_expression_list_empty','kotlin_parser.py',347),
  ('when_stmt -> WHEN LPAREN expression RPAREN LBRACE when_branches RBRACE','when_stmt',7,'p_when_stmt','kotlin_parser.py',353),
  ('when_branches -> when_branches when_branch','when_branches',2,'p_when_branches_multiple','kotlin_parser.py',357),
  ('when_branches -> when_branch','when_branches',1,'p_when_branches_single','kotlin_parser.py',362),
  ('when_branch -> expression ARROW statement_list','when_branch',3,'p_when_branch_expression','kotlin_parser.py',366),
  ('when_branch -> ELSE ARROW statement_list','when_branch',3,'p_when_branch_else','kotlin_parser.py',370),
  ('when_stmt -> WHEN LBRACE when_branches RBRACE','when_stmt',4,'p_when_stmt_without_expr','kotlin_parser.py',375),
  ('when_branch -> expression block','when_branch',2,'p_when_branch_expression_brace','kotlin_parser.py',379),
  ('when_branch -> ELSE block','when_branch',2,'p_when_branch_else_brace','kotlin_parser.py',383),
  ('class_def -> CLASS ID LBRACE class_body RBRACE','class_def',5,'p_class_def','kotlin_parser.py',436),
  ('class_body -> class_body class_member','class_body',2,'p_class_body_multiple','kotlin_parser.py',440),
  ('class_body -> class_member','class_body',1,'p_class_body_single','kotlin_parser.py',445),
  ('class_body -> <empty>','class_body',0,'p_class_body_empty','kotlin_parser.py',449),
  ('class_member -> property_def','class_member',1,'p_class_member','kotlin_parser.py',453),
  ('class_member -> method_def','class_member',1,'p_class_member','kotlin_parser.py',454),
  ('property_def -> VAR ID COLON type','property_def',4,'p_property_def','kotlin_parser.py',458),
  ('property_def -> VAL ID COLON type','property_def',4,'p_property_def','kotlin_parser.py',459),
  ('property_def -> VAR ID COLON type ASSIGN expression','property_def',6,'p_property_def','kotlin_parser.py',460),
  ('property_def -> VAL ID COLON type ASSIGN expression','property_def',6,'p_property_def','kotlin_parser.py',461),
  ('method_def -> FUN ID LPAREN param_list_opt RPAREN block','method_def',6,'p_method_def','kotlin_parser.py',471),
  ('function_def -> FUN ID LPAREN param_list_opt RPAREN COLON type block','function_def',8,'p_function_def','kotlin_parser.py',498),
  ('function_def -> FUN ID LPAREN param_list_opt RPAREN block','function_def',6,'p_function_def','kotlin_parser.py',499),
  ('break_stmt -> BREAK','break_stmt',1,'p_break_stmt','kotlin_parser.py',533),
  ('continue_stmt -> CONTINUE','continue_stmt',1,'p_continue_stmt','kotlin_parser.py',538),
  ('expression -> ARRAYOF LPAREN expression_list RPAREN','expression',4,'p_expression_arrayof','kotlin_parser.py',643),
  ('if_else -> IF LPAREN expression RPAREN block ELSE block','if_else',7,'p_if_else','kotlin_parser.py',647),
  ('expression -> READLINE LPAREN RPAREN','expression',3,'p_expression_readline','kotlin_parser.py',659),
]
